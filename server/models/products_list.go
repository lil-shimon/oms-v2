// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductsList is an object representing the database table.
type ProductsList struct {
	ID             uint        `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name           string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Unit           string      `boil:"unit" json:"unit" toml:"unit" yaml:"unit"`
	UnitPrice      int         `boil:"unit_price" json:"unit_price" toml:"unit_price" yaml:"unit_price"`
	Tax            float64     `boil:"tax" json:"tax" toml:"tax" yaml:"tax"`
	DeletedAt      null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	CreatedAt      null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt      null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	Notes          null.String `boil:"notes" json:"notes,omitempty" toml:"notes" yaml:"notes,omitempty"`
	ProductTypesID uint        `boil:"product_types_id" json:"product_types_id" toml:"product_types_id" yaml:"product_types_id"`

	R *productsListR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productsListL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductsListColumns = struct {
	ID             string
	Name           string
	Unit           string
	UnitPrice      string
	Tax            string
	DeletedAt      string
	CreatedAt      string
	UpdatedAt      string
	Notes          string
	ProductTypesID string
}{
	ID:             "id",
	Name:           "name",
	Unit:           "unit",
	UnitPrice:      "unit_price",
	Tax:            "tax",
	DeletedAt:      "deleted_at",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	Notes:          "notes",
	ProductTypesID: "product_types_id",
}

var ProductsListTableColumns = struct {
	ID             string
	Name           string
	Unit           string
	UnitPrice      string
	Tax            string
	DeletedAt      string
	CreatedAt      string
	UpdatedAt      string
	Notes          string
	ProductTypesID string
}{
	ID:             "products_list.id",
	Name:           "products_list.name",
	Unit:           "products_list.unit",
	UnitPrice:      "products_list.unit_price",
	Tax:            "products_list.tax",
	DeletedAt:      "products_list.deleted_at",
	CreatedAt:      "products_list.created_at",
	UpdatedAt:      "products_list.updated_at",
	Notes:          "products_list.notes",
	ProductTypesID: "products_list.product_types_id",
}

// Generated where

var ProductsListWhere = struct {
	ID             whereHelperuint
	Name           whereHelperstring
	Unit           whereHelperstring
	UnitPrice      whereHelperint
	Tax            whereHelperfloat64
	DeletedAt      whereHelpernull_Time
	CreatedAt      whereHelpernull_Time
	UpdatedAt      whereHelpernull_Time
	Notes          whereHelpernull_String
	ProductTypesID whereHelperuint
}{
	ID:             whereHelperuint{field: "`products_list`.`id`"},
	Name:           whereHelperstring{field: "`products_list`.`name`"},
	Unit:           whereHelperstring{field: "`products_list`.`unit`"},
	UnitPrice:      whereHelperint{field: "`products_list`.`unit_price`"},
	Tax:            whereHelperfloat64{field: "`products_list`.`tax`"},
	DeletedAt:      whereHelpernull_Time{field: "`products_list`.`deleted_at`"},
	CreatedAt:      whereHelpernull_Time{field: "`products_list`.`created_at`"},
	UpdatedAt:      whereHelpernull_Time{field: "`products_list`.`updated_at`"},
	Notes:          whereHelpernull_String{field: "`products_list`.`notes`"},
	ProductTypesID: whereHelperuint{field: "`products_list`.`product_types_id`"},
}

// ProductsListRels is where relationship names are stored.
var ProductsListRels = struct {
}{}

// productsListR is where relationships are stored.
type productsListR struct {
}

// NewStruct creates a new relationship struct
func (*productsListR) NewStruct() *productsListR {
	return &productsListR{}
}

// productsListL is where Load methods for each relationship are stored.
type productsListL struct{}

var (
	productsListAllColumns            = []string{"id", "name", "unit", "unit_price", "tax", "deleted_at", "created_at", "updated_at", "notes", "product_types_id"}
	productsListColumnsWithoutDefault = []string{"name", "unit", "unit_price", "tax", "deleted_at", "created_at", "updated_at", "notes", "product_types_id"}
	productsListColumnsWithDefault    = []string{"id"}
	productsListPrimaryKeyColumns     = []string{"id"}
)

type (
	// ProductsListSlice is an alias for a slice of pointers to ProductsList.
	// This should almost always be used instead of []ProductsList.
	ProductsListSlice []*ProductsList
	// ProductsListHook is the signature for custom ProductsList hook methods
	ProductsListHook func(context.Context, boil.ContextExecutor, *ProductsList) error

	productsListQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productsListType                 = reflect.TypeOf(&ProductsList{})
	productsListMapping              = queries.MakeStructMapping(productsListType)
	productsListPrimaryKeyMapping, _ = queries.BindMapping(productsListType, productsListMapping, productsListPrimaryKeyColumns)
	productsListInsertCacheMut       sync.RWMutex
	productsListInsertCache          = make(map[string]insertCache)
	productsListUpdateCacheMut       sync.RWMutex
	productsListUpdateCache          = make(map[string]updateCache)
	productsListUpsertCacheMut       sync.RWMutex
	productsListUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var productsListBeforeInsertHooks []ProductsListHook
var productsListBeforeUpdateHooks []ProductsListHook
var productsListBeforeDeleteHooks []ProductsListHook
var productsListBeforeUpsertHooks []ProductsListHook

var productsListAfterInsertHooks []ProductsListHook
var productsListAfterSelectHooks []ProductsListHook
var productsListAfterUpdateHooks []ProductsListHook
var productsListAfterDeleteHooks []ProductsListHook
var productsListAfterUpsertHooks []ProductsListHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProductsList) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productsListBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProductsList) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productsListBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProductsList) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productsListBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProductsList) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productsListBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProductsList) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productsListAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProductsList) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productsListAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProductsList) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productsListAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProductsList) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productsListAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProductsList) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productsListAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductsListHook registers your hook function for all future operations.
func AddProductsListHook(hookPoint boil.HookPoint, productsListHook ProductsListHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		productsListBeforeInsertHooks = append(productsListBeforeInsertHooks, productsListHook)
	case boil.BeforeUpdateHook:
		productsListBeforeUpdateHooks = append(productsListBeforeUpdateHooks, productsListHook)
	case boil.BeforeDeleteHook:
		productsListBeforeDeleteHooks = append(productsListBeforeDeleteHooks, productsListHook)
	case boil.BeforeUpsertHook:
		productsListBeforeUpsertHooks = append(productsListBeforeUpsertHooks, productsListHook)
	case boil.AfterInsertHook:
		productsListAfterInsertHooks = append(productsListAfterInsertHooks, productsListHook)
	case boil.AfterSelectHook:
		productsListAfterSelectHooks = append(productsListAfterSelectHooks, productsListHook)
	case boil.AfterUpdateHook:
		productsListAfterUpdateHooks = append(productsListAfterUpdateHooks, productsListHook)
	case boil.AfterDeleteHook:
		productsListAfterDeleteHooks = append(productsListAfterDeleteHooks, productsListHook)
	case boil.AfterUpsertHook:
		productsListAfterUpsertHooks = append(productsListAfterUpsertHooks, productsListHook)
	}
}

// One returns a single productsList record from the query.
func (q productsListQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProductsList, error) {
	o := &ProductsList{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for products_list")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProductsList records from the query.
func (q productsListQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductsListSlice, error) {
	var o []*ProductsList

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ProductsList slice")
	}

	if len(productsListAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProductsList records in the query.
func (q productsListQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count products_list rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q productsListQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if products_list exists")
	}

	return count > 0, nil
}

// ProductsLists retrieves all the records using an executor.
func ProductsLists(mods ...qm.QueryMod) productsListQuery {
	mods = append(mods, qm.From("`products_list`"))
	return productsListQuery{NewQuery(mods...)}
}

// FindProductsList retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductsList(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*ProductsList, error) {
	productsListObj := &ProductsList{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `products_list` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, productsListObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from products_list")
	}

	if err = productsListObj.doAfterSelectHooks(ctx, exec); err != nil {
		return productsListObj, err
	}

	return productsListObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductsList) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no products_list provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productsListColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productsListInsertCacheMut.RLock()
	cache, cached := productsListInsertCache[key]
	productsListInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productsListAllColumns,
			productsListColumnsWithDefault,
			productsListColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(productsListType, productsListMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productsListType, productsListMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `products_list` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `products_list` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `products_list` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, productsListPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into products_list")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == productsListMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for products_list")
	}

CacheNoHooks:
	if !cached {
		productsListInsertCacheMut.Lock()
		productsListInsertCache[key] = cache
		productsListInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ProductsList.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductsList) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	productsListUpdateCacheMut.RLock()
	cache, cached := productsListUpdateCache[key]
	productsListUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productsListAllColumns,
			productsListPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update products_list, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `products_list` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, productsListPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productsListType, productsListMapping, append(wl, productsListPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update products_list row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for products_list")
	}

	if !cached {
		productsListUpdateCacheMut.Lock()
		productsListUpdateCache[key] = cache
		productsListUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q productsListQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for products_list")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for products_list")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductsListSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productsListPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `products_list` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productsListPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in productsList slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all productsList")
	}
	return rowsAff, nil
}

var mySQLProductsListUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProductsList) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no products_list provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productsListColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLProductsListUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productsListUpsertCacheMut.RLock()
	cache, cached := productsListUpsertCache[key]
	productsListUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			productsListAllColumns,
			productsListColumnsWithDefault,
			productsListColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			productsListAllColumns,
			productsListPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert products_list, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`products_list`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `products_list` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(productsListType, productsListMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productsListType, productsListMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for products_list")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == productsListMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(productsListType, productsListMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for products_list")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for products_list")
	}

CacheNoHooks:
	if !cached {
		productsListUpsertCacheMut.Lock()
		productsListUpsertCache[key] = cache
		productsListUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ProductsList record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductsList) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ProductsList provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productsListPrimaryKeyMapping)
	sql := "DELETE FROM `products_list` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from products_list")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for products_list")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q productsListQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no productsListQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from products_list")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for products_list")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductsListSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(productsListBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productsListPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `products_list` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productsListPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from productsList slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for products_list")
	}

	if len(productsListAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductsList) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProductsList(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductsListSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductsListSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productsListPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `products_list`.* FROM `products_list` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productsListPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProductsListSlice")
	}

	*o = slice

	return nil
}

// ProductsListExists checks if the ProductsList row exists.
func ProductsListExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `products_list` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if products_list exists")
	}

	return exists, nil
}
