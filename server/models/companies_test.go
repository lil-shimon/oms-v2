// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCompanies(t *testing.T) {
	t.Parallel()

	query := Companies()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCompaniesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Company{}
	if err = randomize.Struct(seed, o, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Companies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCompaniesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Company{}
	if err = randomize.Struct(seed, o, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Companies().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Companies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCompaniesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Company{}
	if err = randomize.Struct(seed, o, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CompanySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Companies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCompaniesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Company{}
	if err = randomize.Struct(seed, o, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CompanyExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Company exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CompanyExists to return true, but got false.")
	}
}

func testCompaniesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Company{}
	if err = randomize.Struct(seed, o, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	companyFound, err := FindCompany(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if companyFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCompaniesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Company{}
	if err = randomize.Struct(seed, o, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Companies().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCompaniesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Company{}
	if err = randomize.Struct(seed, o, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Companies().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCompaniesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	companyOne := &Company{}
	companyTwo := &Company{}
	if err = randomize.Struct(seed, companyOne, companyDBTypes, false, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}
	if err = randomize.Struct(seed, companyTwo, companyDBTypes, false, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = companyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = companyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Companies().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCompaniesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	companyOne := &Company{}
	companyTwo := &Company{}
	if err = randomize.Struct(seed, companyOne, companyDBTypes, false, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}
	if err = randomize.Struct(seed, companyTwo, companyDBTypes, false, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = companyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = companyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Companies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func companyBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Company) error {
	*o = Company{}
	return nil
}

func companyAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Company) error {
	*o = Company{}
	return nil
}

func companyAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Company) error {
	*o = Company{}
	return nil
}

func companyBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Company) error {
	*o = Company{}
	return nil
}

func companyAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Company) error {
	*o = Company{}
	return nil
}

func companyBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Company) error {
	*o = Company{}
	return nil
}

func companyAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Company) error {
	*o = Company{}
	return nil
}

func companyBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Company) error {
	*o = Company{}
	return nil
}

func companyAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Company) error {
	*o = Company{}
	return nil
}

func testCompaniesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Company{}
	o := &Company{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, companyDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Company object: %s", err)
	}

	AddCompanyHook(boil.BeforeInsertHook, companyBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	companyBeforeInsertHooks = []CompanyHook{}

	AddCompanyHook(boil.AfterInsertHook, companyAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	companyAfterInsertHooks = []CompanyHook{}

	AddCompanyHook(boil.AfterSelectHook, companyAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	companyAfterSelectHooks = []CompanyHook{}

	AddCompanyHook(boil.BeforeUpdateHook, companyBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	companyBeforeUpdateHooks = []CompanyHook{}

	AddCompanyHook(boil.AfterUpdateHook, companyAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	companyAfterUpdateHooks = []CompanyHook{}

	AddCompanyHook(boil.BeforeDeleteHook, companyBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	companyBeforeDeleteHooks = []CompanyHook{}

	AddCompanyHook(boil.AfterDeleteHook, companyAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	companyAfterDeleteHooks = []CompanyHook{}

	AddCompanyHook(boil.BeforeUpsertHook, companyBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	companyBeforeUpsertHooks = []CompanyHook{}

	AddCompanyHook(boil.AfterUpsertHook, companyAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	companyAfterUpsertHooks = []CompanyHook{}
}

func testCompaniesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Company{}
	if err = randomize.Struct(seed, o, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Companies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCompaniesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Company{}
	if err = randomize.Struct(seed, o, companyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(companyColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Companies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCompanyToOneCycleUsingCycle(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Company
	var foreign Cycle

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, cycleDBTypes, false, cycleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cycle struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CycleID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Cycle().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CompanySlice{&local}
	if err = local.L.LoadCycle(ctx, tx, false, (*[]*Company)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Cycle == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Cycle = nil
	if err = local.L.LoadCycle(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Cycle == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCompanyToOneInvoiceFormUsingInvoiceForm(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Company
	var foreign InvoiceForm

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, invoiceFormDBTypes, false, invoiceFormColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceForm struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.InvoiceFormID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.InvoiceForm().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CompanySlice{&local}
	if err = local.L.LoadInvoiceForm(ctx, tx, false, (*[]*Company)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.InvoiceForm == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.InvoiceForm = nil
	if err = local.L.LoadInvoiceForm(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.InvoiceForm == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCompanyToOnePaymentDateUsingPaymentDate(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Company
	var foreign PaymentDate

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, paymentDateDBTypes, false, paymentDateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PaymentDate struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.PaymentDateID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.PaymentDate().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CompanySlice{&local}
	if err = local.L.LoadPaymentDate(ctx, tx, false, (*[]*Company)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.PaymentDate == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.PaymentDate = nil
	if err = local.L.LoadPaymentDate(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.PaymentDate == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCompanyToOnePaymentWayUsingPaymentWay(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Company
	var foreign PaymentWay

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, paymentWayDBTypes, false, paymentWayColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PaymentWay struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.PaymentWayID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.PaymentWay().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CompanySlice{&local}
	if err = local.L.LoadPaymentWay(ctx, tx, false, (*[]*Company)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.PaymentWay == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.PaymentWay = nil
	if err = local.L.LoadPaymentWay(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.PaymentWay == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCompanyToOneSendWayUsingSendWay(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Company
	var foreign SendWay

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, sendWayDBTypes, false, sendWayColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SendWay struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.SendWayID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.SendWay().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CompanySlice{&local}
	if err = local.L.LoadSendWay(ctx, tx, false, (*[]*Company)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SendWay == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.SendWay = nil
	if err = local.L.LoadSendWay(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SendWay == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCompanyToOneSetOpCycleUsingCycle(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Company
	var b, c Cycle

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, companyDBTypes, false, strmangle.SetComplement(companyPrimaryKeyColumns, companyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, cycleDBTypes, false, strmangle.SetComplement(cyclePrimaryKeyColumns, cycleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, cycleDBTypes, false, strmangle.SetComplement(cyclePrimaryKeyColumns, cycleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Cycle{&b, &c} {
		err = a.SetCycle(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Cycle != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Companies[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CycleID, x.ID) {
			t.Error("foreign key was wrong value", a.CycleID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CycleID))
		reflect.Indirect(reflect.ValueOf(&a.CycleID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CycleID, x.ID) {
			t.Error("foreign key was wrong value", a.CycleID, x.ID)
		}
	}
}

func testCompanyToOneRemoveOpCycleUsingCycle(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Company
	var b Cycle

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, companyDBTypes, false, strmangle.SetComplement(companyPrimaryKeyColumns, companyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, cycleDBTypes, false, strmangle.SetComplement(cyclePrimaryKeyColumns, cycleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCycle(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCycle(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Cycle().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Cycle != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CycleID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Companies) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testCompanyToOneSetOpInvoiceFormUsingInvoiceForm(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Company
	var b, c InvoiceForm

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, companyDBTypes, false, strmangle.SetComplement(companyPrimaryKeyColumns, companyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, invoiceFormDBTypes, false, strmangle.SetComplement(invoiceFormPrimaryKeyColumns, invoiceFormColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, invoiceFormDBTypes, false, strmangle.SetComplement(invoiceFormPrimaryKeyColumns, invoiceFormColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*InvoiceForm{&b, &c} {
		err = a.SetInvoiceForm(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.InvoiceForm != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Companies[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.InvoiceFormID, x.ID) {
			t.Error("foreign key was wrong value", a.InvoiceFormID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.InvoiceFormID))
		reflect.Indirect(reflect.ValueOf(&a.InvoiceFormID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.InvoiceFormID, x.ID) {
			t.Error("foreign key was wrong value", a.InvoiceFormID, x.ID)
		}
	}
}

func testCompanyToOneRemoveOpInvoiceFormUsingInvoiceForm(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Company
	var b InvoiceForm

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, companyDBTypes, false, strmangle.SetComplement(companyPrimaryKeyColumns, companyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, invoiceFormDBTypes, false, strmangle.SetComplement(invoiceFormPrimaryKeyColumns, invoiceFormColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetInvoiceForm(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveInvoiceForm(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.InvoiceForm().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.InvoiceForm != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.InvoiceFormID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Companies) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testCompanyToOneSetOpPaymentDateUsingPaymentDate(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Company
	var b, c PaymentDate

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, companyDBTypes, false, strmangle.SetComplement(companyPrimaryKeyColumns, companyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, paymentDateDBTypes, false, strmangle.SetComplement(paymentDatePrimaryKeyColumns, paymentDateColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, paymentDateDBTypes, false, strmangle.SetComplement(paymentDatePrimaryKeyColumns, paymentDateColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*PaymentDate{&b, &c} {
		err = a.SetPaymentDate(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.PaymentDate != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Companies[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.PaymentDateID, x.ID) {
			t.Error("foreign key was wrong value", a.PaymentDateID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PaymentDateID))
		reflect.Indirect(reflect.ValueOf(&a.PaymentDateID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.PaymentDateID, x.ID) {
			t.Error("foreign key was wrong value", a.PaymentDateID, x.ID)
		}
	}
}

func testCompanyToOneRemoveOpPaymentDateUsingPaymentDate(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Company
	var b PaymentDate

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, companyDBTypes, false, strmangle.SetComplement(companyPrimaryKeyColumns, companyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, paymentDateDBTypes, false, strmangle.SetComplement(paymentDatePrimaryKeyColumns, paymentDateColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetPaymentDate(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemovePaymentDate(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.PaymentDate().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.PaymentDate != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.PaymentDateID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Companies) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testCompanyToOneSetOpPaymentWayUsingPaymentWay(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Company
	var b, c PaymentWay

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, companyDBTypes, false, strmangle.SetComplement(companyPrimaryKeyColumns, companyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, paymentWayDBTypes, false, strmangle.SetComplement(paymentWayPrimaryKeyColumns, paymentWayColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, paymentWayDBTypes, false, strmangle.SetComplement(paymentWayPrimaryKeyColumns, paymentWayColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*PaymentWay{&b, &c} {
		err = a.SetPaymentWay(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.PaymentWay != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Companies[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.PaymentWayID, x.ID) {
			t.Error("foreign key was wrong value", a.PaymentWayID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PaymentWayID))
		reflect.Indirect(reflect.ValueOf(&a.PaymentWayID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.PaymentWayID, x.ID) {
			t.Error("foreign key was wrong value", a.PaymentWayID, x.ID)
		}
	}
}

func testCompanyToOneRemoveOpPaymentWayUsingPaymentWay(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Company
	var b PaymentWay

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, companyDBTypes, false, strmangle.SetComplement(companyPrimaryKeyColumns, companyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, paymentWayDBTypes, false, strmangle.SetComplement(paymentWayPrimaryKeyColumns, paymentWayColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetPaymentWay(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemovePaymentWay(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.PaymentWay().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.PaymentWay != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.PaymentWayID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Companies) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testCompanyToOneSetOpSendWayUsingSendWay(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Company
	var b, c SendWay

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, companyDBTypes, false, strmangle.SetComplement(companyPrimaryKeyColumns, companyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, sendWayDBTypes, false, strmangle.SetComplement(sendWayPrimaryKeyColumns, sendWayColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, sendWayDBTypes, false, strmangle.SetComplement(sendWayPrimaryKeyColumns, sendWayColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*SendWay{&b, &c} {
		err = a.SetSendWay(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.SendWay != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Companies[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.SendWayID, x.ID) {
			t.Error("foreign key was wrong value", a.SendWayID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SendWayID))
		reflect.Indirect(reflect.ValueOf(&a.SendWayID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.SendWayID, x.ID) {
			t.Error("foreign key was wrong value", a.SendWayID, x.ID)
		}
	}
}

func testCompanyToOneRemoveOpSendWayUsingSendWay(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Company
	var b SendWay

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, companyDBTypes, false, strmangle.SetComplement(companyPrimaryKeyColumns, companyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, sendWayDBTypes, false, strmangle.SetComplement(sendWayPrimaryKeyColumns, sendWayColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetSendWay(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveSendWay(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.SendWay().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.SendWay != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.SendWayID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Companies) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testCompaniesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Company{}
	if err = randomize.Struct(seed, o, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCompaniesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Company{}
	if err = randomize.Struct(seed, o, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CompanySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCompaniesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Company{}
	if err = randomize.Struct(seed, o, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Companies().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	companyDBTypes = map[string]string{`ID`: `int`, `Type`: `int`, `Name`: `varchar`, `PostCode`: `varchar`, `Address`: `varchar`, `Tel`: `varchar`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`, `SiteID`: `int`, `Code`: `varchar`, `Homepage`: `varchar`, `CycleID`: `bigint`, `PaymentWayID`: `bigint`, `SendWayID`: `bigint`, `PaymentDateID`: `bigint`, `InvoiceFormID`: `bigint`, `DeletedAt`: `timestamp`, `Note`: `text`, `OrderDate`: `varchar`}
	_              = bytes.MinRead
)

func testCompaniesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(companyPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(companyAllColumns) == len(companyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Company{}
	if err = randomize.Struct(seed, o, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Companies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, companyDBTypes, true, companyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCompaniesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(companyAllColumns) == len(companyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Company{}
	if err = randomize.Struct(seed, o, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Companies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, companyDBTypes, true, companyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(companyAllColumns, companyPrimaryKeyColumns) {
		fields = companyAllColumns
	} else {
		fields = strmangle.SetComplement(
			companyAllColumns,
			companyPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CompanySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCompaniesUpsert(t *testing.T) {
	t.Parallel()

	if len(companyAllColumns) == len(companyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLCompanyUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Company{}
	if err = randomize.Struct(seed, &o, companyDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Company: %s", err)
	}

	count, err := Companies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, companyDBTypes, false, companyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Company: %s", err)
	}

	count, err = Companies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
