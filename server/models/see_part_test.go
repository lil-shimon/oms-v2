// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSeeParts(t *testing.T) {
	t.Parallel()

	query := SeeParts()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSeePartsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SeePart{}
	if err = randomize.Struct(seed, o, seePartDBTypes, true, seePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SeeParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSeePartsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SeePart{}
	if err = randomize.Struct(seed, o, seePartDBTypes, true, seePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SeeParts().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SeeParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSeePartsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SeePart{}
	if err = randomize.Struct(seed, o, seePartDBTypes, true, seePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SeePartSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SeeParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSeePartsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SeePart{}
	if err = randomize.Struct(seed, o, seePartDBTypes, true, seePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SeePartExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if SeePart exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SeePartExists to return true, but got false.")
	}
}

func testSeePartsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SeePart{}
	if err = randomize.Struct(seed, o, seePartDBTypes, true, seePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	seePartFound, err := FindSeePart(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if seePartFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSeePartsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SeePart{}
	if err = randomize.Struct(seed, o, seePartDBTypes, true, seePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = SeeParts().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSeePartsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SeePart{}
	if err = randomize.Struct(seed, o, seePartDBTypes, true, seePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := SeeParts().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSeePartsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	seePartOne := &SeePart{}
	seePartTwo := &SeePart{}
	if err = randomize.Struct(seed, seePartOne, seePartDBTypes, false, seePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeePart struct: %s", err)
	}
	if err = randomize.Struct(seed, seePartTwo, seePartDBTypes, false, seePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = seePartOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = seePartTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SeeParts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSeePartsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	seePartOne := &SeePart{}
	seePartTwo := &SeePart{}
	if err = randomize.Struct(seed, seePartOne, seePartDBTypes, false, seePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeePart struct: %s", err)
	}
	if err = randomize.Struct(seed, seePartTwo, seePartDBTypes, false, seePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = seePartOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = seePartTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SeeParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func seePartBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *SeePart) error {
	*o = SeePart{}
	return nil
}

func seePartAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *SeePart) error {
	*o = SeePart{}
	return nil
}

func seePartAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *SeePart) error {
	*o = SeePart{}
	return nil
}

func seePartBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SeePart) error {
	*o = SeePart{}
	return nil
}

func seePartAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SeePart) error {
	*o = SeePart{}
	return nil
}

func seePartBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SeePart) error {
	*o = SeePart{}
	return nil
}

func seePartAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SeePart) error {
	*o = SeePart{}
	return nil
}

func seePartBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SeePart) error {
	*o = SeePart{}
	return nil
}

func seePartAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SeePart) error {
	*o = SeePart{}
	return nil
}

func testSeePartsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &SeePart{}
	o := &SeePart{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, seePartDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SeePart object: %s", err)
	}

	AddSeePartHook(boil.BeforeInsertHook, seePartBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	seePartBeforeInsertHooks = []SeePartHook{}

	AddSeePartHook(boil.AfterInsertHook, seePartAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	seePartAfterInsertHooks = []SeePartHook{}

	AddSeePartHook(boil.AfterSelectHook, seePartAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	seePartAfterSelectHooks = []SeePartHook{}

	AddSeePartHook(boil.BeforeUpdateHook, seePartBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	seePartBeforeUpdateHooks = []SeePartHook{}

	AddSeePartHook(boil.AfterUpdateHook, seePartAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	seePartAfterUpdateHooks = []SeePartHook{}

	AddSeePartHook(boil.BeforeDeleteHook, seePartBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	seePartBeforeDeleteHooks = []SeePartHook{}

	AddSeePartHook(boil.AfterDeleteHook, seePartAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	seePartAfterDeleteHooks = []SeePartHook{}

	AddSeePartHook(boil.BeforeUpsertHook, seePartBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	seePartBeforeUpsertHooks = []SeePartHook{}

	AddSeePartHook(boil.AfterUpsertHook, seePartAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	seePartAfterUpsertHooks = []SeePartHook{}
}

func testSeePartsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SeePart{}
	if err = randomize.Struct(seed, o, seePartDBTypes, true, seePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SeeParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSeePartsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SeePart{}
	if err = randomize.Struct(seed, o, seePartDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SeePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(seePartColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := SeeParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSeePartsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SeePart{}
	if err = randomize.Struct(seed, o, seePartDBTypes, true, seePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSeePartsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SeePart{}
	if err = randomize.Struct(seed, o, seePartDBTypes, true, seePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SeePartSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSeePartsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SeePart{}
	if err = randomize.Struct(seed, o, seePartDBTypes, true, seePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SeeParts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	seePartDBTypes = map[string]string{`ID`: `int`, `Name`: `varchar`}
	_              = bytes.MinRead
)

func testSeePartsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(seePartPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(seePartAllColumns) == len(seePartPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SeePart{}
	if err = randomize.Struct(seed, o, seePartDBTypes, true, seePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SeeParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, seePartDBTypes, true, seePartPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SeePart struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSeePartsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(seePartAllColumns) == len(seePartPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SeePart{}
	if err = randomize.Struct(seed, o, seePartDBTypes, true, seePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SeeParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, seePartDBTypes, true, seePartPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SeePart struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(seePartAllColumns, seePartPrimaryKeyColumns) {
		fields = seePartAllColumns
	} else {
		fields = strmangle.SetComplement(
			seePartAllColumns,
			seePartPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SeePartSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSeePartsUpsert(t *testing.T) {
	t.Parallel()

	if len(seePartAllColumns) == len(seePartPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLSeePartUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := SeePart{}
	if err = randomize.Struct(seed, &o, seePartDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SeePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SeePart: %s", err)
	}

	count, err := SeeParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, seePartDBTypes, false, seePartPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SeePart struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SeePart: %s", err)
	}

	count, err = SeeParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
