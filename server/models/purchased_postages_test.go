// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPurchasedPostages(t *testing.T) {
	t.Parallel()

	query := PurchasedPostages()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPurchasedPostagesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PurchasedPostage{}
	if err = randomize.Struct(seed, o, purchasedPostageDBTypes, true, purchasedPostageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PurchasedPostage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PurchasedPostages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPurchasedPostagesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PurchasedPostage{}
	if err = randomize.Struct(seed, o, purchasedPostageDBTypes, true, purchasedPostageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PurchasedPostage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PurchasedPostages().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PurchasedPostages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPurchasedPostagesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PurchasedPostage{}
	if err = randomize.Struct(seed, o, purchasedPostageDBTypes, true, purchasedPostageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PurchasedPostage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PurchasedPostageSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PurchasedPostages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPurchasedPostagesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PurchasedPostage{}
	if err = randomize.Struct(seed, o, purchasedPostageDBTypes, true, purchasedPostageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PurchasedPostage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PurchasedPostageExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if PurchasedPostage exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PurchasedPostageExists to return true, but got false.")
	}
}

func testPurchasedPostagesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PurchasedPostage{}
	if err = randomize.Struct(seed, o, purchasedPostageDBTypes, true, purchasedPostageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PurchasedPostage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	purchasedPostageFound, err := FindPurchasedPostage(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if purchasedPostageFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPurchasedPostagesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PurchasedPostage{}
	if err = randomize.Struct(seed, o, purchasedPostageDBTypes, true, purchasedPostageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PurchasedPostage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PurchasedPostages().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPurchasedPostagesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PurchasedPostage{}
	if err = randomize.Struct(seed, o, purchasedPostageDBTypes, true, purchasedPostageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PurchasedPostage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PurchasedPostages().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPurchasedPostagesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	purchasedPostageOne := &PurchasedPostage{}
	purchasedPostageTwo := &PurchasedPostage{}
	if err = randomize.Struct(seed, purchasedPostageOne, purchasedPostageDBTypes, false, purchasedPostageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PurchasedPostage struct: %s", err)
	}
	if err = randomize.Struct(seed, purchasedPostageTwo, purchasedPostageDBTypes, false, purchasedPostageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PurchasedPostage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = purchasedPostageOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = purchasedPostageTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PurchasedPostages().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPurchasedPostagesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	purchasedPostageOne := &PurchasedPostage{}
	purchasedPostageTwo := &PurchasedPostage{}
	if err = randomize.Struct(seed, purchasedPostageOne, purchasedPostageDBTypes, false, purchasedPostageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PurchasedPostage struct: %s", err)
	}
	if err = randomize.Struct(seed, purchasedPostageTwo, purchasedPostageDBTypes, false, purchasedPostageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PurchasedPostage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = purchasedPostageOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = purchasedPostageTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PurchasedPostages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func purchasedPostageBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PurchasedPostage) error {
	*o = PurchasedPostage{}
	return nil
}

func purchasedPostageAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PurchasedPostage) error {
	*o = PurchasedPostage{}
	return nil
}

func purchasedPostageAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PurchasedPostage) error {
	*o = PurchasedPostage{}
	return nil
}

func purchasedPostageBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PurchasedPostage) error {
	*o = PurchasedPostage{}
	return nil
}

func purchasedPostageAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PurchasedPostage) error {
	*o = PurchasedPostage{}
	return nil
}

func purchasedPostageBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PurchasedPostage) error {
	*o = PurchasedPostage{}
	return nil
}

func purchasedPostageAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PurchasedPostage) error {
	*o = PurchasedPostage{}
	return nil
}

func purchasedPostageBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PurchasedPostage) error {
	*o = PurchasedPostage{}
	return nil
}

func purchasedPostageAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PurchasedPostage) error {
	*o = PurchasedPostage{}
	return nil
}

func testPurchasedPostagesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PurchasedPostage{}
	o := &PurchasedPostage{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, purchasedPostageDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PurchasedPostage object: %s", err)
	}

	AddPurchasedPostageHook(boil.BeforeInsertHook, purchasedPostageBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	purchasedPostageBeforeInsertHooks = []PurchasedPostageHook{}

	AddPurchasedPostageHook(boil.AfterInsertHook, purchasedPostageAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	purchasedPostageAfterInsertHooks = []PurchasedPostageHook{}

	AddPurchasedPostageHook(boil.AfterSelectHook, purchasedPostageAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	purchasedPostageAfterSelectHooks = []PurchasedPostageHook{}

	AddPurchasedPostageHook(boil.BeforeUpdateHook, purchasedPostageBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	purchasedPostageBeforeUpdateHooks = []PurchasedPostageHook{}

	AddPurchasedPostageHook(boil.AfterUpdateHook, purchasedPostageAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	purchasedPostageAfterUpdateHooks = []PurchasedPostageHook{}

	AddPurchasedPostageHook(boil.BeforeDeleteHook, purchasedPostageBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	purchasedPostageBeforeDeleteHooks = []PurchasedPostageHook{}

	AddPurchasedPostageHook(boil.AfterDeleteHook, purchasedPostageAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	purchasedPostageAfterDeleteHooks = []PurchasedPostageHook{}

	AddPurchasedPostageHook(boil.BeforeUpsertHook, purchasedPostageBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	purchasedPostageBeforeUpsertHooks = []PurchasedPostageHook{}

	AddPurchasedPostageHook(boil.AfterUpsertHook, purchasedPostageAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	purchasedPostageAfterUpsertHooks = []PurchasedPostageHook{}
}

func testPurchasedPostagesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PurchasedPostage{}
	if err = randomize.Struct(seed, o, purchasedPostageDBTypes, true, purchasedPostageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PurchasedPostage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PurchasedPostages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPurchasedPostagesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PurchasedPostage{}
	if err = randomize.Struct(seed, o, purchasedPostageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PurchasedPostage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(purchasedPostageColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PurchasedPostages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPurchasedPostageToOneDocumentUsingDocument(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PurchasedPostage
	var foreign Document

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, purchasedPostageDBTypes, false, purchasedPostageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PurchasedPostage struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, documentDBTypes, false, documentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.DocumentID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Document().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := PurchasedPostageSlice{&local}
	if err = local.L.LoadDocument(ctx, tx, false, (*[]*PurchasedPostage)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Document == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Document = nil
	if err = local.L.LoadDocument(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Document == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPurchasedPostageToOneSetOpDocumentUsingDocument(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PurchasedPostage
	var b, c Document

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, purchasedPostageDBTypes, false, strmangle.SetComplement(purchasedPostagePrimaryKeyColumns, purchasedPostageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, documentDBTypes, false, strmangle.SetComplement(documentPrimaryKeyColumns, documentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, documentDBTypes, false, strmangle.SetComplement(documentPrimaryKeyColumns, documentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Document{&b, &c} {
		err = a.SetDocument(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Document != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PurchasedPostages[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DocumentID != x.ID {
			t.Error("foreign key was wrong value", a.DocumentID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DocumentID))
		reflect.Indirect(reflect.ValueOf(&a.DocumentID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.DocumentID != x.ID {
			t.Error("foreign key was wrong value", a.DocumentID, x.ID)
		}
	}
}

func testPurchasedPostagesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PurchasedPostage{}
	if err = randomize.Struct(seed, o, purchasedPostageDBTypes, true, purchasedPostageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PurchasedPostage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPurchasedPostagesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PurchasedPostage{}
	if err = randomize.Struct(seed, o, purchasedPostageDBTypes, true, purchasedPostageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PurchasedPostage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PurchasedPostageSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPurchasedPostagesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PurchasedPostage{}
	if err = randomize.Struct(seed, o, purchasedPostageDBTypes, true, purchasedPostageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PurchasedPostage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PurchasedPostages().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	purchasedPostageDBTypes = map[string]string{`ID`: `int`, `DocumentID`: `int`, `SenderPlace`: `varchar`, `DestinationPlace`: `varchar`, `PostagePrice`: `int`, `Quantity`: `int`, `Size`: `varchar`, `Unit`: `varchar`, `DeletedAt`: `timestamp`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`}
	_                       = bytes.MinRead
)

func testPurchasedPostagesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(purchasedPostagePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(purchasedPostageAllColumns) == len(purchasedPostagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PurchasedPostage{}
	if err = randomize.Struct(seed, o, purchasedPostageDBTypes, true, purchasedPostageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PurchasedPostage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PurchasedPostages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, purchasedPostageDBTypes, true, purchasedPostagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PurchasedPostage struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPurchasedPostagesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(purchasedPostageAllColumns) == len(purchasedPostagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PurchasedPostage{}
	if err = randomize.Struct(seed, o, purchasedPostageDBTypes, true, purchasedPostageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PurchasedPostage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PurchasedPostages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, purchasedPostageDBTypes, true, purchasedPostagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PurchasedPostage struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(purchasedPostageAllColumns, purchasedPostagePrimaryKeyColumns) {
		fields = purchasedPostageAllColumns
	} else {
		fields = strmangle.SetComplement(
			purchasedPostageAllColumns,
			purchasedPostagePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PurchasedPostageSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPurchasedPostagesUpsert(t *testing.T) {
	t.Parallel()

	if len(purchasedPostageAllColumns) == len(purchasedPostagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLPurchasedPostageUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PurchasedPostage{}
	if err = randomize.Struct(seed, &o, purchasedPostageDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PurchasedPostage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PurchasedPostage: %s", err)
	}

	count, err := PurchasedPostages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, purchasedPostageDBTypes, false, purchasedPostagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PurchasedPostage struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PurchasedPostage: %s", err)
	}

	count, err = PurchasedPostages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
