// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OrderItem is an object representing the database table.
type OrderItem struct {
	ID         uint        `boil:"id" json:"id" toml:"id" yaml:"id"`
	OrderDate  null.Time   `boil:"order_date" json:"order_date,omitempty" toml:"order_date" yaml:"order_date,omitempty"`
	Note       null.String `boil:"note" json:"note,omitempty" toml:"note" yaml:"note,omitempty"`
	SubTotal   null.Int    `boil:"sub_total" json:"sub_total,omitempty" toml:"sub_total" yaml:"sub_total,omitempty"`
	Quotation  null.String `boil:"quotation" json:"quotation,omitempty" toml:"quotation" yaml:"quotation,omitempty"`
	Invoice    null.String `boil:"invoice" json:"invoice,omitempty" toml:"invoice" yaml:"invoice,omitempty"`
	TotalPrice null.Int    `boil:"total_price" json:"total_price,omitempty" toml:"total_price" yaml:"total_price,omitempty"`
	Remarks    null.String `boil:"remarks" json:"remarks,omitempty" toml:"remarks" yaml:"remarks,omitempty"`
	CreatedAt  null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt  null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	OrderID    uint        `boil:"order_id" json:"order_id" toml:"order_id" yaml:"order_id"`
	Claim      null.String `boil:"claim" json:"claim,omitempty" toml:"claim" yaml:"claim,omitempty"`
	OrderFile  null.String `boil:"order_file" json:"order_file,omitempty" toml:"order_file" yaml:"order_file,omitempty"`

	R *orderItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L orderItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrderItemColumns = struct {
	ID         string
	OrderDate  string
	Note       string
	SubTotal   string
	Quotation  string
	Invoice    string
	TotalPrice string
	Remarks    string
	CreatedAt  string
	UpdatedAt  string
	OrderID    string
	Claim      string
	OrderFile  string
}{
	ID:         "id",
	OrderDate:  "order_date",
	Note:       "note",
	SubTotal:   "sub_total",
	Quotation:  "quotation",
	Invoice:    "invoice",
	TotalPrice: "total_price",
	Remarks:    "remarks",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
	OrderID:    "order_id",
	Claim:      "claim",
	OrderFile:  "order_file",
}

var OrderItemTableColumns = struct {
	ID         string
	OrderDate  string
	Note       string
	SubTotal   string
	Quotation  string
	Invoice    string
	TotalPrice string
	Remarks    string
	CreatedAt  string
	UpdatedAt  string
	OrderID    string
	Claim      string
	OrderFile  string
}{
	ID:         "order_items.id",
	OrderDate:  "order_items.order_date",
	Note:       "order_items.note",
	SubTotal:   "order_items.sub_total",
	Quotation:  "order_items.quotation",
	Invoice:    "order_items.invoice",
	TotalPrice: "order_items.total_price",
	Remarks:    "order_items.remarks",
	CreatedAt:  "order_items.created_at",
	UpdatedAt:  "order_items.updated_at",
	OrderID:    "order_items.order_id",
	Claim:      "order_items.claim",
	OrderFile:  "order_items.order_file",
}

// Generated where

var OrderItemWhere = struct {
	ID         whereHelperuint
	OrderDate  whereHelpernull_Time
	Note       whereHelpernull_String
	SubTotal   whereHelpernull_Int
	Quotation  whereHelpernull_String
	Invoice    whereHelpernull_String
	TotalPrice whereHelpernull_Int
	Remarks    whereHelpernull_String
	CreatedAt  whereHelpernull_Time
	UpdatedAt  whereHelpernull_Time
	OrderID    whereHelperuint
	Claim      whereHelpernull_String
	OrderFile  whereHelpernull_String
}{
	ID:         whereHelperuint{field: "`order_items`.`id`"},
	OrderDate:  whereHelpernull_Time{field: "`order_items`.`order_date`"},
	Note:       whereHelpernull_String{field: "`order_items`.`note`"},
	SubTotal:   whereHelpernull_Int{field: "`order_items`.`sub_total`"},
	Quotation:  whereHelpernull_String{field: "`order_items`.`quotation`"},
	Invoice:    whereHelpernull_String{field: "`order_items`.`invoice`"},
	TotalPrice: whereHelpernull_Int{field: "`order_items`.`total_price`"},
	Remarks:    whereHelpernull_String{field: "`order_items`.`remarks`"},
	CreatedAt:  whereHelpernull_Time{field: "`order_items`.`created_at`"},
	UpdatedAt:  whereHelpernull_Time{field: "`order_items`.`updated_at`"},
	OrderID:    whereHelperuint{field: "`order_items`.`order_id`"},
	Claim:      whereHelpernull_String{field: "`order_items`.`claim`"},
	OrderFile:  whereHelpernull_String{field: "`order_items`.`order_file`"},
}

// OrderItemRels is where relationship names are stored.
var OrderItemRels = struct {
}{}

// orderItemR is where relationships are stored.
type orderItemR struct {
}

// NewStruct creates a new relationship struct
func (*orderItemR) NewStruct() *orderItemR {
	return &orderItemR{}
}

// orderItemL is where Load methods for each relationship are stored.
type orderItemL struct{}

var (
	orderItemAllColumns            = []string{"id", "order_date", "note", "sub_total", "quotation", "invoice", "total_price", "remarks", "created_at", "updated_at", "order_id", "claim", "order_file"}
	orderItemColumnsWithoutDefault = []string{"order_date", "note", "sub_total", "quotation", "invoice", "total_price", "remarks", "created_at", "updated_at", "order_id", "claim", "order_file"}
	orderItemColumnsWithDefault    = []string{"id"}
	orderItemPrimaryKeyColumns     = []string{"id"}
)

type (
	// OrderItemSlice is an alias for a slice of pointers to OrderItem.
	// This should almost always be used instead of []OrderItem.
	OrderItemSlice []*OrderItem
	// OrderItemHook is the signature for custom OrderItem hook methods
	OrderItemHook func(context.Context, boil.ContextExecutor, *OrderItem) error

	orderItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	orderItemType                 = reflect.TypeOf(&OrderItem{})
	orderItemMapping              = queries.MakeStructMapping(orderItemType)
	orderItemPrimaryKeyMapping, _ = queries.BindMapping(orderItemType, orderItemMapping, orderItemPrimaryKeyColumns)
	orderItemInsertCacheMut       sync.RWMutex
	orderItemInsertCache          = make(map[string]insertCache)
	orderItemUpdateCacheMut       sync.RWMutex
	orderItemUpdateCache          = make(map[string]updateCache)
	orderItemUpsertCacheMut       sync.RWMutex
	orderItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var orderItemBeforeInsertHooks []OrderItemHook
var orderItemBeforeUpdateHooks []OrderItemHook
var orderItemBeforeDeleteHooks []OrderItemHook
var orderItemBeforeUpsertHooks []OrderItemHook

var orderItemAfterInsertHooks []OrderItemHook
var orderItemAfterSelectHooks []OrderItemHook
var orderItemAfterUpdateHooks []OrderItemHook
var orderItemAfterDeleteHooks []OrderItemHook
var orderItemAfterUpsertHooks []OrderItemHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OrderItem) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderItemBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OrderItem) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderItemBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OrderItem) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderItemBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OrderItem) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderItemBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OrderItem) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderItemAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OrderItem) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderItemAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OrderItem) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderItemAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OrderItem) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderItemAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OrderItem) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderItemAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrderItemHook registers your hook function for all future operations.
func AddOrderItemHook(hookPoint boil.HookPoint, orderItemHook OrderItemHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		orderItemBeforeInsertHooks = append(orderItemBeforeInsertHooks, orderItemHook)
	case boil.BeforeUpdateHook:
		orderItemBeforeUpdateHooks = append(orderItemBeforeUpdateHooks, orderItemHook)
	case boil.BeforeDeleteHook:
		orderItemBeforeDeleteHooks = append(orderItemBeforeDeleteHooks, orderItemHook)
	case boil.BeforeUpsertHook:
		orderItemBeforeUpsertHooks = append(orderItemBeforeUpsertHooks, orderItemHook)
	case boil.AfterInsertHook:
		orderItemAfterInsertHooks = append(orderItemAfterInsertHooks, orderItemHook)
	case boil.AfterSelectHook:
		orderItemAfterSelectHooks = append(orderItemAfterSelectHooks, orderItemHook)
	case boil.AfterUpdateHook:
		orderItemAfterUpdateHooks = append(orderItemAfterUpdateHooks, orderItemHook)
	case boil.AfterDeleteHook:
		orderItemAfterDeleteHooks = append(orderItemAfterDeleteHooks, orderItemHook)
	case boil.AfterUpsertHook:
		orderItemAfterUpsertHooks = append(orderItemAfterUpsertHooks, orderItemHook)
	}
}

// One returns a single orderItem record from the query.
func (q orderItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrderItem, error) {
	o := &OrderItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for order_items")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OrderItem records from the query.
func (q orderItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrderItemSlice, error) {
	var o []*OrderItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to OrderItem slice")
	}

	if len(orderItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OrderItem records in the query.
func (q orderItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count order_items rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q orderItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if order_items exists")
	}

	return count > 0, nil
}

// OrderItems retrieves all the records using an executor.
func OrderItems(mods ...qm.QueryMod) orderItemQuery {
	mods = append(mods, qm.From("`order_items`"))
	return orderItemQuery{NewQuery(mods...)}
}

// FindOrderItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrderItem(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*OrderItem, error) {
	orderItemObj := &OrderItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `order_items` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, orderItemObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from order_items")
	}

	if err = orderItemObj.doAfterSelectHooks(ctx, exec); err != nil {
		return orderItemObj, err
	}

	return orderItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrderItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no order_items provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	orderItemInsertCacheMut.RLock()
	cache, cached := orderItemInsertCache[key]
	orderItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			orderItemAllColumns,
			orderItemColumnsWithDefault,
			orderItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(orderItemType, orderItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(orderItemType, orderItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `order_items` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `order_items` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `order_items` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, orderItemPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into order_items")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == orderItemMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for order_items")
	}

CacheNoHooks:
	if !cached {
		orderItemInsertCacheMut.Lock()
		orderItemInsertCache[key] = cache
		orderItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OrderItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrderItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	orderItemUpdateCacheMut.RLock()
	cache, cached := orderItemUpdateCache[key]
	orderItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			orderItemAllColumns,
			orderItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update order_items, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `order_items` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, orderItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(orderItemType, orderItemMapping, append(wl, orderItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update order_items row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for order_items")
	}

	if !cached {
		orderItemUpdateCacheMut.Lock()
		orderItemUpdateCache[key] = cache
		orderItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q orderItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for order_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for order_items")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrderItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `order_items` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, orderItemPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in orderItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all orderItem")
	}
	return rowsAff, nil
}

var mySQLOrderItemUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OrderItem) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no order_items provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderItemColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLOrderItemUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	orderItemUpsertCacheMut.RLock()
	cache, cached := orderItemUpsertCache[key]
	orderItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			orderItemAllColumns,
			orderItemColumnsWithDefault,
			orderItemColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			orderItemAllColumns,
			orderItemPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert order_items, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`order_items`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `order_items` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(orderItemType, orderItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(orderItemType, orderItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for order_items")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == orderItemMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(orderItemType, orderItemMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for order_items")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for order_items")
	}

CacheNoHooks:
	if !cached {
		orderItemUpsertCacheMut.Lock()
		orderItemUpsertCache[key] = cache
		orderItemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OrderItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrderItem) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OrderItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), orderItemPrimaryKeyMapping)
	sql := "DELETE FROM `order_items` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from order_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for order_items")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q orderItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no orderItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from order_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for order_items")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrderItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(orderItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `order_items` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, orderItemPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from orderItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for order_items")
	}

	if len(orderItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrderItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrderItem(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrderItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `order_items`.* FROM `order_items` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, orderItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OrderItemSlice")
	}

	*o = slice

	return nil
}

// OrderItemExists checks if the OrderItem row exists.
func OrderItemExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `order_items` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if order_items exists")
	}

	return exists, nil
}
