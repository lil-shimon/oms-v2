// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCompaniesLogoes(t *testing.T) {
	t.Parallel()

	query := CompaniesLogoes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCompaniesLogoesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompaniesLogo{}
	if err = randomize.Struct(seed, o, companiesLogoDBTypes, true, companiesLogoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompaniesLogo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CompaniesLogoes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCompaniesLogoesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompaniesLogo{}
	if err = randomize.Struct(seed, o, companiesLogoDBTypes, true, companiesLogoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompaniesLogo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := CompaniesLogoes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CompaniesLogoes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCompaniesLogoesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompaniesLogo{}
	if err = randomize.Struct(seed, o, companiesLogoDBTypes, true, companiesLogoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompaniesLogo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CompaniesLogoSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CompaniesLogoes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCompaniesLogoesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompaniesLogo{}
	if err = randomize.Struct(seed, o, companiesLogoDBTypes, true, companiesLogoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompaniesLogo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CompaniesLogoExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if CompaniesLogo exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CompaniesLogoExists to return true, but got false.")
	}
}

func testCompaniesLogoesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompaniesLogo{}
	if err = randomize.Struct(seed, o, companiesLogoDBTypes, true, companiesLogoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompaniesLogo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	companiesLogoFound, err := FindCompaniesLogo(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if companiesLogoFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCompaniesLogoesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompaniesLogo{}
	if err = randomize.Struct(seed, o, companiesLogoDBTypes, true, companiesLogoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompaniesLogo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = CompaniesLogoes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCompaniesLogoesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompaniesLogo{}
	if err = randomize.Struct(seed, o, companiesLogoDBTypes, true, companiesLogoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompaniesLogo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := CompaniesLogoes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCompaniesLogoesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	companiesLogoOne := &CompaniesLogo{}
	companiesLogoTwo := &CompaniesLogo{}
	if err = randomize.Struct(seed, companiesLogoOne, companiesLogoDBTypes, false, companiesLogoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompaniesLogo struct: %s", err)
	}
	if err = randomize.Struct(seed, companiesLogoTwo, companiesLogoDBTypes, false, companiesLogoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompaniesLogo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = companiesLogoOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = companiesLogoTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CompaniesLogoes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCompaniesLogoesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	companiesLogoOne := &CompaniesLogo{}
	companiesLogoTwo := &CompaniesLogo{}
	if err = randomize.Struct(seed, companiesLogoOne, companiesLogoDBTypes, false, companiesLogoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompaniesLogo struct: %s", err)
	}
	if err = randomize.Struct(seed, companiesLogoTwo, companiesLogoDBTypes, false, companiesLogoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompaniesLogo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = companiesLogoOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = companiesLogoTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CompaniesLogoes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func companiesLogoBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *CompaniesLogo) error {
	*o = CompaniesLogo{}
	return nil
}

func companiesLogoAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *CompaniesLogo) error {
	*o = CompaniesLogo{}
	return nil
}

func companiesLogoAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *CompaniesLogo) error {
	*o = CompaniesLogo{}
	return nil
}

func companiesLogoBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CompaniesLogo) error {
	*o = CompaniesLogo{}
	return nil
}

func companiesLogoAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CompaniesLogo) error {
	*o = CompaniesLogo{}
	return nil
}

func companiesLogoBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CompaniesLogo) error {
	*o = CompaniesLogo{}
	return nil
}

func companiesLogoAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CompaniesLogo) error {
	*o = CompaniesLogo{}
	return nil
}

func companiesLogoBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CompaniesLogo) error {
	*o = CompaniesLogo{}
	return nil
}

func companiesLogoAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CompaniesLogo) error {
	*o = CompaniesLogo{}
	return nil
}

func testCompaniesLogoesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &CompaniesLogo{}
	o := &CompaniesLogo{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, companiesLogoDBTypes, false); err != nil {
		t.Errorf("Unable to randomize CompaniesLogo object: %s", err)
	}

	AddCompaniesLogoHook(boil.BeforeInsertHook, companiesLogoBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	companiesLogoBeforeInsertHooks = []CompaniesLogoHook{}

	AddCompaniesLogoHook(boil.AfterInsertHook, companiesLogoAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	companiesLogoAfterInsertHooks = []CompaniesLogoHook{}

	AddCompaniesLogoHook(boil.AfterSelectHook, companiesLogoAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	companiesLogoAfterSelectHooks = []CompaniesLogoHook{}

	AddCompaniesLogoHook(boil.BeforeUpdateHook, companiesLogoBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	companiesLogoBeforeUpdateHooks = []CompaniesLogoHook{}

	AddCompaniesLogoHook(boil.AfterUpdateHook, companiesLogoAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	companiesLogoAfterUpdateHooks = []CompaniesLogoHook{}

	AddCompaniesLogoHook(boil.BeforeDeleteHook, companiesLogoBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	companiesLogoBeforeDeleteHooks = []CompaniesLogoHook{}

	AddCompaniesLogoHook(boil.AfterDeleteHook, companiesLogoAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	companiesLogoAfterDeleteHooks = []CompaniesLogoHook{}

	AddCompaniesLogoHook(boil.BeforeUpsertHook, companiesLogoBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	companiesLogoBeforeUpsertHooks = []CompaniesLogoHook{}

	AddCompaniesLogoHook(boil.AfterUpsertHook, companiesLogoAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	companiesLogoAfterUpsertHooks = []CompaniesLogoHook{}
}

func testCompaniesLogoesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompaniesLogo{}
	if err = randomize.Struct(seed, o, companiesLogoDBTypes, true, companiesLogoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompaniesLogo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CompaniesLogoes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCompaniesLogoesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompaniesLogo{}
	if err = randomize.Struct(seed, o, companiesLogoDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CompaniesLogo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(companiesLogoColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := CompaniesLogoes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCompaniesLogoesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompaniesLogo{}
	if err = randomize.Struct(seed, o, companiesLogoDBTypes, true, companiesLogoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompaniesLogo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCompaniesLogoesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompaniesLogo{}
	if err = randomize.Struct(seed, o, companiesLogoDBTypes, true, companiesLogoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompaniesLogo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CompaniesLogoSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCompaniesLogoesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompaniesLogo{}
	if err = randomize.Struct(seed, o, companiesLogoDBTypes, true, companiesLogoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompaniesLogo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CompaniesLogoes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	companiesLogoDBTypes = map[string]string{`ID`: `int`, `Name`: `varchar`, `ImgPath`: `varchar`, `DeletedAt`: `timestamp`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`}
	_                    = bytes.MinRead
)

func testCompaniesLogoesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(companiesLogoPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(companiesLogoAllColumns) == len(companiesLogoPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CompaniesLogo{}
	if err = randomize.Struct(seed, o, companiesLogoDBTypes, true, companiesLogoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompaniesLogo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CompaniesLogoes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, companiesLogoDBTypes, true, companiesLogoPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CompaniesLogo struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCompaniesLogoesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(companiesLogoAllColumns) == len(companiesLogoPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CompaniesLogo{}
	if err = randomize.Struct(seed, o, companiesLogoDBTypes, true, companiesLogoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompaniesLogo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CompaniesLogoes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, companiesLogoDBTypes, true, companiesLogoPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CompaniesLogo struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(companiesLogoAllColumns, companiesLogoPrimaryKeyColumns) {
		fields = companiesLogoAllColumns
	} else {
		fields = strmangle.SetComplement(
			companiesLogoAllColumns,
			companiesLogoPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CompaniesLogoSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCompaniesLogoesUpsert(t *testing.T) {
	t.Parallel()

	if len(companiesLogoAllColumns) == len(companiesLogoPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLCompaniesLogoUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := CompaniesLogo{}
	if err = randomize.Struct(seed, &o, companiesLogoDBTypes, false); err != nil {
		t.Errorf("Unable to randomize CompaniesLogo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CompaniesLogo: %s", err)
	}

	count, err := CompaniesLogoes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, companiesLogoDBTypes, false, companiesLogoPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CompaniesLogo struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CompaniesLogo: %s", err)
	}

	count, err = CompaniesLogoes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
