// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBusinessPartnerCompanies(t *testing.T) {
	t.Parallel()

	query := BusinessPartnerCompanies()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBusinessPartnerCompaniesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BusinessPartnerCompany{}
	if err = randomize.Struct(seed, o, businessPartnerCompanyDBTypes, true, businessPartnerCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BusinessPartnerCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BusinessPartnerCompanies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBusinessPartnerCompaniesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BusinessPartnerCompany{}
	if err = randomize.Struct(seed, o, businessPartnerCompanyDBTypes, true, businessPartnerCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BusinessPartnerCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := BusinessPartnerCompanies().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BusinessPartnerCompanies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBusinessPartnerCompaniesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BusinessPartnerCompany{}
	if err = randomize.Struct(seed, o, businessPartnerCompanyDBTypes, true, businessPartnerCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BusinessPartnerCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BusinessPartnerCompanySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BusinessPartnerCompanies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBusinessPartnerCompaniesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BusinessPartnerCompany{}
	if err = randomize.Struct(seed, o, businessPartnerCompanyDBTypes, true, businessPartnerCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BusinessPartnerCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BusinessPartnerCompanyExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if BusinessPartnerCompany exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BusinessPartnerCompanyExists to return true, but got false.")
	}
}

func testBusinessPartnerCompaniesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BusinessPartnerCompany{}
	if err = randomize.Struct(seed, o, businessPartnerCompanyDBTypes, true, businessPartnerCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BusinessPartnerCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	businessPartnerCompanyFound, err := FindBusinessPartnerCompany(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if businessPartnerCompanyFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBusinessPartnerCompaniesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BusinessPartnerCompany{}
	if err = randomize.Struct(seed, o, businessPartnerCompanyDBTypes, true, businessPartnerCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BusinessPartnerCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = BusinessPartnerCompanies().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBusinessPartnerCompaniesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BusinessPartnerCompany{}
	if err = randomize.Struct(seed, o, businessPartnerCompanyDBTypes, true, businessPartnerCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BusinessPartnerCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := BusinessPartnerCompanies().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBusinessPartnerCompaniesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	businessPartnerCompanyOne := &BusinessPartnerCompany{}
	businessPartnerCompanyTwo := &BusinessPartnerCompany{}
	if err = randomize.Struct(seed, businessPartnerCompanyOne, businessPartnerCompanyDBTypes, false, businessPartnerCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BusinessPartnerCompany struct: %s", err)
	}
	if err = randomize.Struct(seed, businessPartnerCompanyTwo, businessPartnerCompanyDBTypes, false, businessPartnerCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BusinessPartnerCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = businessPartnerCompanyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = businessPartnerCompanyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BusinessPartnerCompanies().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBusinessPartnerCompaniesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	businessPartnerCompanyOne := &BusinessPartnerCompany{}
	businessPartnerCompanyTwo := &BusinessPartnerCompany{}
	if err = randomize.Struct(seed, businessPartnerCompanyOne, businessPartnerCompanyDBTypes, false, businessPartnerCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BusinessPartnerCompany struct: %s", err)
	}
	if err = randomize.Struct(seed, businessPartnerCompanyTwo, businessPartnerCompanyDBTypes, false, businessPartnerCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BusinessPartnerCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = businessPartnerCompanyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = businessPartnerCompanyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BusinessPartnerCompanies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func businessPartnerCompanyBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *BusinessPartnerCompany) error {
	*o = BusinessPartnerCompany{}
	return nil
}

func businessPartnerCompanyAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *BusinessPartnerCompany) error {
	*o = BusinessPartnerCompany{}
	return nil
}

func businessPartnerCompanyAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *BusinessPartnerCompany) error {
	*o = BusinessPartnerCompany{}
	return nil
}

func businessPartnerCompanyBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BusinessPartnerCompany) error {
	*o = BusinessPartnerCompany{}
	return nil
}

func businessPartnerCompanyAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BusinessPartnerCompany) error {
	*o = BusinessPartnerCompany{}
	return nil
}

func businessPartnerCompanyBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BusinessPartnerCompany) error {
	*o = BusinessPartnerCompany{}
	return nil
}

func businessPartnerCompanyAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BusinessPartnerCompany) error {
	*o = BusinessPartnerCompany{}
	return nil
}

func businessPartnerCompanyBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BusinessPartnerCompany) error {
	*o = BusinessPartnerCompany{}
	return nil
}

func businessPartnerCompanyAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BusinessPartnerCompany) error {
	*o = BusinessPartnerCompany{}
	return nil
}

func testBusinessPartnerCompaniesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &BusinessPartnerCompany{}
	o := &BusinessPartnerCompany{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, businessPartnerCompanyDBTypes, false); err != nil {
		t.Errorf("Unable to randomize BusinessPartnerCompany object: %s", err)
	}

	AddBusinessPartnerCompanyHook(boil.BeforeInsertHook, businessPartnerCompanyBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	businessPartnerCompanyBeforeInsertHooks = []BusinessPartnerCompanyHook{}

	AddBusinessPartnerCompanyHook(boil.AfterInsertHook, businessPartnerCompanyAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	businessPartnerCompanyAfterInsertHooks = []BusinessPartnerCompanyHook{}

	AddBusinessPartnerCompanyHook(boil.AfterSelectHook, businessPartnerCompanyAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	businessPartnerCompanyAfterSelectHooks = []BusinessPartnerCompanyHook{}

	AddBusinessPartnerCompanyHook(boil.BeforeUpdateHook, businessPartnerCompanyBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	businessPartnerCompanyBeforeUpdateHooks = []BusinessPartnerCompanyHook{}

	AddBusinessPartnerCompanyHook(boil.AfterUpdateHook, businessPartnerCompanyAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	businessPartnerCompanyAfterUpdateHooks = []BusinessPartnerCompanyHook{}

	AddBusinessPartnerCompanyHook(boil.BeforeDeleteHook, businessPartnerCompanyBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	businessPartnerCompanyBeforeDeleteHooks = []BusinessPartnerCompanyHook{}

	AddBusinessPartnerCompanyHook(boil.AfterDeleteHook, businessPartnerCompanyAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	businessPartnerCompanyAfterDeleteHooks = []BusinessPartnerCompanyHook{}

	AddBusinessPartnerCompanyHook(boil.BeforeUpsertHook, businessPartnerCompanyBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	businessPartnerCompanyBeforeUpsertHooks = []BusinessPartnerCompanyHook{}

	AddBusinessPartnerCompanyHook(boil.AfterUpsertHook, businessPartnerCompanyAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	businessPartnerCompanyAfterUpsertHooks = []BusinessPartnerCompanyHook{}
}

func testBusinessPartnerCompaniesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BusinessPartnerCompany{}
	if err = randomize.Struct(seed, o, businessPartnerCompanyDBTypes, true, businessPartnerCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BusinessPartnerCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BusinessPartnerCompanies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBusinessPartnerCompaniesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BusinessPartnerCompany{}
	if err = randomize.Struct(seed, o, businessPartnerCompanyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BusinessPartnerCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(businessPartnerCompanyColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := BusinessPartnerCompanies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBusinessPartnerCompaniesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BusinessPartnerCompany{}
	if err = randomize.Struct(seed, o, businessPartnerCompanyDBTypes, true, businessPartnerCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BusinessPartnerCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBusinessPartnerCompaniesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BusinessPartnerCompany{}
	if err = randomize.Struct(seed, o, businessPartnerCompanyDBTypes, true, businessPartnerCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BusinessPartnerCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BusinessPartnerCompanySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBusinessPartnerCompaniesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BusinessPartnerCompany{}
	if err = randomize.Struct(seed, o, businessPartnerCompanyDBTypes, true, businessPartnerCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BusinessPartnerCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BusinessPartnerCompanies().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	businessPartnerCompanyDBTypes = map[string]string{`ID`: `int`, `Name`: `varchar`, `Furigana`: `varchar`, `Department`: `varchar`, `PersonInCharge`: `varchar`, `MailAddress`: `varchar`, `PostCode`: `varchar`, `Address`: `varchar`, `TelephoneNumber`: `varchar`, `HonorificTitle`: `varchar`, `DeletedAt`: `timestamp`}
	_                             = bytes.MinRead
)

func testBusinessPartnerCompaniesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(businessPartnerCompanyPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(businessPartnerCompanyAllColumns) == len(businessPartnerCompanyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BusinessPartnerCompany{}
	if err = randomize.Struct(seed, o, businessPartnerCompanyDBTypes, true, businessPartnerCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BusinessPartnerCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BusinessPartnerCompanies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, businessPartnerCompanyDBTypes, true, businessPartnerCompanyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BusinessPartnerCompany struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBusinessPartnerCompaniesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(businessPartnerCompanyAllColumns) == len(businessPartnerCompanyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BusinessPartnerCompany{}
	if err = randomize.Struct(seed, o, businessPartnerCompanyDBTypes, true, businessPartnerCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BusinessPartnerCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BusinessPartnerCompanies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, businessPartnerCompanyDBTypes, true, businessPartnerCompanyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BusinessPartnerCompany struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(businessPartnerCompanyAllColumns, businessPartnerCompanyPrimaryKeyColumns) {
		fields = businessPartnerCompanyAllColumns
	} else {
		fields = strmangle.SetComplement(
			businessPartnerCompanyAllColumns,
			businessPartnerCompanyPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BusinessPartnerCompanySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testBusinessPartnerCompaniesUpsert(t *testing.T) {
	t.Parallel()

	if len(businessPartnerCompanyAllColumns) == len(businessPartnerCompanyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLBusinessPartnerCompanyUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := BusinessPartnerCompany{}
	if err = randomize.Struct(seed, &o, businessPartnerCompanyDBTypes, false); err != nil {
		t.Errorf("Unable to randomize BusinessPartnerCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BusinessPartnerCompany: %s", err)
	}

	count, err := BusinessPartnerCompanies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, businessPartnerCompanyDBTypes, false, businessPartnerCompanyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BusinessPartnerCompany struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BusinessPartnerCompany: %s", err)
	}

	count, err = BusinessPartnerCompanies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
