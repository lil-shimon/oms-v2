// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPaymentDates(t *testing.T) {
	t.Parallel()

	query := PaymentDates()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPaymentDatesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PaymentDate{}
	if err = randomize.Struct(seed, o, paymentDateDBTypes, true, paymentDateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PaymentDate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PaymentDates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPaymentDatesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PaymentDate{}
	if err = randomize.Struct(seed, o, paymentDateDBTypes, true, paymentDateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PaymentDate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PaymentDates().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PaymentDates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPaymentDatesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PaymentDate{}
	if err = randomize.Struct(seed, o, paymentDateDBTypes, true, paymentDateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PaymentDate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PaymentDateSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PaymentDates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPaymentDatesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PaymentDate{}
	if err = randomize.Struct(seed, o, paymentDateDBTypes, true, paymentDateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PaymentDate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PaymentDateExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if PaymentDate exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PaymentDateExists to return true, but got false.")
	}
}

func testPaymentDatesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PaymentDate{}
	if err = randomize.Struct(seed, o, paymentDateDBTypes, true, paymentDateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PaymentDate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	paymentDateFound, err := FindPaymentDate(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if paymentDateFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPaymentDatesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PaymentDate{}
	if err = randomize.Struct(seed, o, paymentDateDBTypes, true, paymentDateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PaymentDate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PaymentDates().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPaymentDatesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PaymentDate{}
	if err = randomize.Struct(seed, o, paymentDateDBTypes, true, paymentDateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PaymentDate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PaymentDates().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPaymentDatesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	paymentDateOne := &PaymentDate{}
	paymentDateTwo := &PaymentDate{}
	if err = randomize.Struct(seed, paymentDateOne, paymentDateDBTypes, false, paymentDateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PaymentDate struct: %s", err)
	}
	if err = randomize.Struct(seed, paymentDateTwo, paymentDateDBTypes, false, paymentDateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PaymentDate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = paymentDateOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = paymentDateTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PaymentDates().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPaymentDatesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	paymentDateOne := &PaymentDate{}
	paymentDateTwo := &PaymentDate{}
	if err = randomize.Struct(seed, paymentDateOne, paymentDateDBTypes, false, paymentDateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PaymentDate struct: %s", err)
	}
	if err = randomize.Struct(seed, paymentDateTwo, paymentDateDBTypes, false, paymentDateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PaymentDate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = paymentDateOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = paymentDateTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PaymentDates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func paymentDateBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PaymentDate) error {
	*o = PaymentDate{}
	return nil
}

func paymentDateAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PaymentDate) error {
	*o = PaymentDate{}
	return nil
}

func paymentDateAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PaymentDate) error {
	*o = PaymentDate{}
	return nil
}

func paymentDateBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PaymentDate) error {
	*o = PaymentDate{}
	return nil
}

func paymentDateAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PaymentDate) error {
	*o = PaymentDate{}
	return nil
}

func paymentDateBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PaymentDate) error {
	*o = PaymentDate{}
	return nil
}

func paymentDateAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PaymentDate) error {
	*o = PaymentDate{}
	return nil
}

func paymentDateBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PaymentDate) error {
	*o = PaymentDate{}
	return nil
}

func paymentDateAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PaymentDate) error {
	*o = PaymentDate{}
	return nil
}

func testPaymentDatesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PaymentDate{}
	o := &PaymentDate{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, paymentDateDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PaymentDate object: %s", err)
	}

	AddPaymentDateHook(boil.BeforeInsertHook, paymentDateBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	paymentDateBeforeInsertHooks = []PaymentDateHook{}

	AddPaymentDateHook(boil.AfterInsertHook, paymentDateAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	paymentDateAfterInsertHooks = []PaymentDateHook{}

	AddPaymentDateHook(boil.AfterSelectHook, paymentDateAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	paymentDateAfterSelectHooks = []PaymentDateHook{}

	AddPaymentDateHook(boil.BeforeUpdateHook, paymentDateBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	paymentDateBeforeUpdateHooks = []PaymentDateHook{}

	AddPaymentDateHook(boil.AfterUpdateHook, paymentDateAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	paymentDateAfterUpdateHooks = []PaymentDateHook{}

	AddPaymentDateHook(boil.BeforeDeleteHook, paymentDateBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	paymentDateBeforeDeleteHooks = []PaymentDateHook{}

	AddPaymentDateHook(boil.AfterDeleteHook, paymentDateAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	paymentDateAfterDeleteHooks = []PaymentDateHook{}

	AddPaymentDateHook(boil.BeforeUpsertHook, paymentDateBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	paymentDateBeforeUpsertHooks = []PaymentDateHook{}

	AddPaymentDateHook(boil.AfterUpsertHook, paymentDateAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	paymentDateAfterUpsertHooks = []PaymentDateHook{}
}

func testPaymentDatesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PaymentDate{}
	if err = randomize.Struct(seed, o, paymentDateDBTypes, true, paymentDateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PaymentDate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PaymentDates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPaymentDatesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PaymentDate{}
	if err = randomize.Struct(seed, o, paymentDateDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PaymentDate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(paymentDateColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PaymentDates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPaymentDateToManyCompanies(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PaymentDate
	var b, c Company

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, paymentDateDBTypes, true, paymentDateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PaymentDate struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, companyDBTypes, false, companyColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, companyDBTypes, false, companyColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.PaymentDateID, a.ID)
	queries.Assign(&c.PaymentDateID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Companies().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.PaymentDateID, b.PaymentDateID) {
			bFound = true
		}
		if queries.Equal(v.PaymentDateID, c.PaymentDateID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PaymentDateSlice{&a}
	if err = a.L.LoadCompanies(ctx, tx, false, (*[]*PaymentDate)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Companies); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Companies = nil
	if err = a.L.LoadCompanies(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Companies); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPaymentDateToManyAddOpCompanies(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PaymentDate
	var b, c, d, e Company

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, paymentDateDBTypes, false, strmangle.SetComplement(paymentDatePrimaryKeyColumns, paymentDateColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Company{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, companyDBTypes, false, strmangle.SetComplement(companyPrimaryKeyColumns, companyColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Company{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCompanies(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.PaymentDateID) {
			t.Error("foreign key was wrong value", a.ID, first.PaymentDateID)
		}
		if !queries.Equal(a.ID, second.PaymentDateID) {
			t.Error("foreign key was wrong value", a.ID, second.PaymentDateID)
		}

		if first.R.PaymentDate != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.PaymentDate != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Companies[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Companies[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Companies().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPaymentDateToManySetOpCompanies(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PaymentDate
	var b, c, d, e Company

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, paymentDateDBTypes, false, strmangle.SetComplement(paymentDatePrimaryKeyColumns, paymentDateColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Company{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, companyDBTypes, false, strmangle.SetComplement(companyPrimaryKeyColumns, companyColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCompanies(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Companies().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCompanies(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Companies().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.PaymentDateID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.PaymentDateID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.PaymentDateID) {
		t.Error("foreign key was wrong value", a.ID, d.PaymentDateID)
	}
	if !queries.Equal(a.ID, e.PaymentDateID) {
		t.Error("foreign key was wrong value", a.ID, e.PaymentDateID)
	}

	if b.R.PaymentDate != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.PaymentDate != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.PaymentDate != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.PaymentDate != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Companies[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Companies[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testPaymentDateToManyRemoveOpCompanies(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PaymentDate
	var b, c, d, e Company

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, paymentDateDBTypes, false, strmangle.SetComplement(paymentDatePrimaryKeyColumns, paymentDateColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Company{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, companyDBTypes, false, strmangle.SetComplement(companyPrimaryKeyColumns, companyColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCompanies(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Companies().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCompanies(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Companies().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.PaymentDateID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.PaymentDateID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.PaymentDate != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.PaymentDate != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.PaymentDate != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.PaymentDate != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Companies) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Companies[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Companies[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testPaymentDatesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PaymentDate{}
	if err = randomize.Struct(seed, o, paymentDateDBTypes, true, paymentDateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PaymentDate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPaymentDatesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PaymentDate{}
	if err = randomize.Struct(seed, o, paymentDateDBTypes, true, paymentDateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PaymentDate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PaymentDateSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPaymentDatesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PaymentDate{}
	if err = randomize.Struct(seed, o, paymentDateDBTypes, true, paymentDateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PaymentDate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PaymentDates().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	paymentDateDBTypes = map[string]string{`ID`: `bigint`, `Name`: `varchar`}
	_                  = bytes.MinRead
)

func testPaymentDatesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(paymentDatePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(paymentDateAllColumns) == len(paymentDatePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PaymentDate{}
	if err = randomize.Struct(seed, o, paymentDateDBTypes, true, paymentDateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PaymentDate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PaymentDates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, paymentDateDBTypes, true, paymentDatePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PaymentDate struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPaymentDatesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(paymentDateAllColumns) == len(paymentDatePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PaymentDate{}
	if err = randomize.Struct(seed, o, paymentDateDBTypes, true, paymentDateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PaymentDate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PaymentDates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, paymentDateDBTypes, true, paymentDatePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PaymentDate struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(paymentDateAllColumns, paymentDatePrimaryKeyColumns) {
		fields = paymentDateAllColumns
	} else {
		fields = strmangle.SetComplement(
			paymentDateAllColumns,
			paymentDatePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PaymentDateSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPaymentDatesUpsert(t *testing.T) {
	t.Parallel()

	if len(paymentDateAllColumns) == len(paymentDatePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLPaymentDateUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PaymentDate{}
	if err = randomize.Struct(seed, &o, paymentDateDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PaymentDate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PaymentDate: %s", err)
	}

	count, err := PaymentDates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, paymentDateDBTypes, false, paymentDatePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PaymentDate struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PaymentDate: %s", err)
	}

	count, err = PaymentDates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
