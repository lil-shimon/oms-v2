// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDocuments(t *testing.T) {
	t.Parallel()

	query := Documents()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDocumentsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Document{}
	if err = randomize.Struct(seed, o, documentDBTypes, true, documentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Documents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDocumentsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Document{}
	if err = randomize.Struct(seed, o, documentDBTypes, true, documentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Documents().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Documents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDocumentsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Document{}
	if err = randomize.Struct(seed, o, documentDBTypes, true, documentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DocumentSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Documents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDocumentsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Document{}
	if err = randomize.Struct(seed, o, documentDBTypes, true, documentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DocumentExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Document exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DocumentExists to return true, but got false.")
	}
}

func testDocumentsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Document{}
	if err = randomize.Struct(seed, o, documentDBTypes, true, documentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	documentFound, err := FindDocument(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if documentFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDocumentsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Document{}
	if err = randomize.Struct(seed, o, documentDBTypes, true, documentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Documents().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDocumentsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Document{}
	if err = randomize.Struct(seed, o, documentDBTypes, true, documentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Documents().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDocumentsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	documentOne := &Document{}
	documentTwo := &Document{}
	if err = randomize.Struct(seed, documentOne, documentDBTypes, false, documentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}
	if err = randomize.Struct(seed, documentTwo, documentDBTypes, false, documentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = documentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = documentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Documents().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDocumentsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	documentOne := &Document{}
	documentTwo := &Document{}
	if err = randomize.Struct(seed, documentOne, documentDBTypes, false, documentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}
	if err = randomize.Struct(seed, documentTwo, documentDBTypes, false, documentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = documentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = documentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Documents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func documentBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Document) error {
	*o = Document{}
	return nil
}

func documentAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Document) error {
	*o = Document{}
	return nil
}

func documentAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Document) error {
	*o = Document{}
	return nil
}

func documentBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Document) error {
	*o = Document{}
	return nil
}

func documentAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Document) error {
	*o = Document{}
	return nil
}

func documentBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Document) error {
	*o = Document{}
	return nil
}

func documentAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Document) error {
	*o = Document{}
	return nil
}

func documentBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Document) error {
	*o = Document{}
	return nil
}

func documentAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Document) error {
	*o = Document{}
	return nil
}

func testDocumentsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Document{}
	o := &Document{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, documentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Document object: %s", err)
	}

	AddDocumentHook(boil.BeforeInsertHook, documentBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	documentBeforeInsertHooks = []DocumentHook{}

	AddDocumentHook(boil.AfterInsertHook, documentAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	documentAfterInsertHooks = []DocumentHook{}

	AddDocumentHook(boil.AfterSelectHook, documentAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	documentAfterSelectHooks = []DocumentHook{}

	AddDocumentHook(boil.BeforeUpdateHook, documentBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	documentBeforeUpdateHooks = []DocumentHook{}

	AddDocumentHook(boil.AfterUpdateHook, documentAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	documentAfterUpdateHooks = []DocumentHook{}

	AddDocumentHook(boil.BeforeDeleteHook, documentBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	documentBeforeDeleteHooks = []DocumentHook{}

	AddDocumentHook(boil.AfterDeleteHook, documentAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	documentAfterDeleteHooks = []DocumentHook{}

	AddDocumentHook(boil.BeforeUpsertHook, documentBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	documentBeforeUpsertHooks = []DocumentHook{}

	AddDocumentHook(boil.AfterUpsertHook, documentAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	documentAfterUpsertHooks = []DocumentHook{}
}

func testDocumentsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Document{}
	if err = randomize.Struct(seed, o, documentDBTypes, true, documentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Documents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDocumentsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Document{}
	if err = randomize.Struct(seed, o, documentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(documentColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Documents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDocumentToManyContractedCompanies(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Document
	var b, c ContractedCompany

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, documentDBTypes, true, documentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, contractedCompanyDBTypes, false, contractedCompanyColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, contractedCompanyDBTypes, false, contractedCompanyColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.DocumentID = a.ID
	c.DocumentID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ContractedCompanies().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.DocumentID == b.DocumentID {
			bFound = true
		}
		if v.DocumentID == c.DocumentID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DocumentSlice{&a}
	if err = a.L.LoadContractedCompanies(ctx, tx, false, (*[]*Document)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ContractedCompanies); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ContractedCompanies = nil
	if err = a.L.LoadContractedCompanies(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ContractedCompanies); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDocumentToManyPurchasedPostages(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Document
	var b, c PurchasedPostage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, documentDBTypes, true, documentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, purchasedPostageDBTypes, false, purchasedPostageColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, purchasedPostageDBTypes, false, purchasedPostageColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.DocumentID = a.ID
	c.DocumentID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PurchasedPostages().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.DocumentID == b.DocumentID {
			bFound = true
		}
		if v.DocumentID == c.DocumentID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DocumentSlice{&a}
	if err = a.L.LoadPurchasedPostages(ctx, tx, false, (*[]*Document)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PurchasedPostages); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PurchasedPostages = nil
	if err = a.L.LoadPurchasedPostages(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PurchasedPostages); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDocumentToManyAddOpContractedCompanies(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Document
	var b, c, d, e ContractedCompany

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, documentDBTypes, false, strmangle.SetComplement(documentPrimaryKeyColumns, documentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ContractedCompany{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, contractedCompanyDBTypes, false, strmangle.SetComplement(contractedCompanyPrimaryKeyColumns, contractedCompanyColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ContractedCompany{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddContractedCompanies(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.DocumentID {
			t.Error("foreign key was wrong value", a.ID, first.DocumentID)
		}
		if a.ID != second.DocumentID {
			t.Error("foreign key was wrong value", a.ID, second.DocumentID)
		}

		if first.R.Document != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Document != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ContractedCompanies[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ContractedCompanies[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ContractedCompanies().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testDocumentToManyAddOpPurchasedPostages(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Document
	var b, c, d, e PurchasedPostage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, documentDBTypes, false, strmangle.SetComplement(documentPrimaryKeyColumns, documentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PurchasedPostage{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, purchasedPostageDBTypes, false, strmangle.SetComplement(purchasedPostagePrimaryKeyColumns, purchasedPostageColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*PurchasedPostage{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPurchasedPostages(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.DocumentID {
			t.Error("foreign key was wrong value", a.ID, first.DocumentID)
		}
		if a.ID != second.DocumentID {
			t.Error("foreign key was wrong value", a.ID, second.DocumentID)
		}

		if first.R.Document != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Document != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PurchasedPostages[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PurchasedPostages[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PurchasedPostages().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDocumentsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Document{}
	if err = randomize.Struct(seed, o, documentDBTypes, true, documentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDocumentsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Document{}
	if err = randomize.Struct(seed, o, documentDBTypes, true, documentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DocumentSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDocumentsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Document{}
	if err = randomize.Struct(seed, o, documentDBTypes, true, documentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Documents().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	documentDBTypes = map[string]string{`ID`: `int`, `UserID`: `int`, `DocumentTitle`: `varchar`, `Remarks`: `text`, `LogoImgPath`: `varchar`, `Status`: `int`, `DeletedAt`: `timestamp`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`, `BusinessPartnerCompanyName`: `varchar`, `HonorificTitle`: `varchar`, `PaymentTerms`: `varchar`, `UsagePeriod`: `varchar`, `TermAndConditions`: `varchar`, `QuotationExpirationDate`: `varchar`, `DurationOfService`: `varchar`, `TotalPrice`: `int`, `SubTotal`: `int`, `OrderID`: `int`}
	_               = bytes.MinRead
)

func testDocumentsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(documentPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(documentAllColumns) == len(documentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Document{}
	if err = randomize.Struct(seed, o, documentDBTypes, true, documentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Documents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, documentDBTypes, true, documentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDocumentsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(documentAllColumns) == len(documentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Document{}
	if err = randomize.Struct(seed, o, documentDBTypes, true, documentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Documents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, documentDBTypes, true, documentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(documentAllColumns, documentPrimaryKeyColumns) {
		fields = documentAllColumns
	} else {
		fields = strmangle.SetComplement(
			documentAllColumns,
			documentPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DocumentSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDocumentsUpsert(t *testing.T) {
	t.Parallel()

	if len(documentAllColumns) == len(documentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDocumentUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Document{}
	if err = randomize.Struct(seed, &o, documentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Document: %s", err)
	}

	count, err := Documents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, documentDBTypes, false, documentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Document: %s", err)
	}

	count, err = Documents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
