// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAttachments(t *testing.T) {
	t.Parallel()

	query := Attachments()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAttachmentsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attachment{}
	if err = randomize.Struct(seed, o, attachmentDBTypes, true, attachmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attachment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Attachments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAttachmentsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attachment{}
	if err = randomize.Struct(seed, o, attachmentDBTypes, true, attachmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attachment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Attachments().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Attachments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAttachmentsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attachment{}
	if err = randomize.Struct(seed, o, attachmentDBTypes, true, attachmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attachment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AttachmentSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Attachments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAttachmentsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attachment{}
	if err = randomize.Struct(seed, o, attachmentDBTypes, true, attachmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attachment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AttachmentExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Attachment exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AttachmentExists to return true, but got false.")
	}
}

func testAttachmentsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attachment{}
	if err = randomize.Struct(seed, o, attachmentDBTypes, true, attachmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attachment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	attachmentFound, err := FindAttachment(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if attachmentFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAttachmentsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attachment{}
	if err = randomize.Struct(seed, o, attachmentDBTypes, true, attachmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attachment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Attachments().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAttachmentsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attachment{}
	if err = randomize.Struct(seed, o, attachmentDBTypes, true, attachmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attachment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Attachments().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAttachmentsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	attachmentOne := &Attachment{}
	attachmentTwo := &Attachment{}
	if err = randomize.Struct(seed, attachmentOne, attachmentDBTypes, false, attachmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attachment struct: %s", err)
	}
	if err = randomize.Struct(seed, attachmentTwo, attachmentDBTypes, false, attachmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attachment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = attachmentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = attachmentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Attachments().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAttachmentsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	attachmentOne := &Attachment{}
	attachmentTwo := &Attachment{}
	if err = randomize.Struct(seed, attachmentOne, attachmentDBTypes, false, attachmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attachment struct: %s", err)
	}
	if err = randomize.Struct(seed, attachmentTwo, attachmentDBTypes, false, attachmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attachment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = attachmentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = attachmentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Attachments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func attachmentBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Attachment) error {
	*o = Attachment{}
	return nil
}

func attachmentAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Attachment) error {
	*o = Attachment{}
	return nil
}

func attachmentAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Attachment) error {
	*o = Attachment{}
	return nil
}

func attachmentBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Attachment) error {
	*o = Attachment{}
	return nil
}

func attachmentAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Attachment) error {
	*o = Attachment{}
	return nil
}

func attachmentBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Attachment) error {
	*o = Attachment{}
	return nil
}

func attachmentAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Attachment) error {
	*o = Attachment{}
	return nil
}

func attachmentBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Attachment) error {
	*o = Attachment{}
	return nil
}

func attachmentAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Attachment) error {
	*o = Attachment{}
	return nil
}

func testAttachmentsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Attachment{}
	o := &Attachment{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, attachmentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Attachment object: %s", err)
	}

	AddAttachmentHook(boil.BeforeInsertHook, attachmentBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	attachmentBeforeInsertHooks = []AttachmentHook{}

	AddAttachmentHook(boil.AfterInsertHook, attachmentAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	attachmentAfterInsertHooks = []AttachmentHook{}

	AddAttachmentHook(boil.AfterSelectHook, attachmentAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	attachmentAfterSelectHooks = []AttachmentHook{}

	AddAttachmentHook(boil.BeforeUpdateHook, attachmentBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	attachmentBeforeUpdateHooks = []AttachmentHook{}

	AddAttachmentHook(boil.AfterUpdateHook, attachmentAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	attachmentAfterUpdateHooks = []AttachmentHook{}

	AddAttachmentHook(boil.BeforeDeleteHook, attachmentBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	attachmentBeforeDeleteHooks = []AttachmentHook{}

	AddAttachmentHook(boil.AfterDeleteHook, attachmentAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	attachmentAfterDeleteHooks = []AttachmentHook{}

	AddAttachmentHook(boil.BeforeUpsertHook, attachmentBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	attachmentBeforeUpsertHooks = []AttachmentHook{}

	AddAttachmentHook(boil.AfterUpsertHook, attachmentAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	attachmentAfterUpsertHooks = []AttachmentHook{}
}

func testAttachmentsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attachment{}
	if err = randomize.Struct(seed, o, attachmentDBTypes, true, attachmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attachment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Attachments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAttachmentsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attachment{}
	if err = randomize.Struct(seed, o, attachmentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Attachment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(attachmentColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Attachments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAttachmentsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attachment{}
	if err = randomize.Struct(seed, o, attachmentDBTypes, true, attachmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attachment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAttachmentsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attachment{}
	if err = randomize.Struct(seed, o, attachmentDBTypes, true, attachmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attachment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AttachmentSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAttachmentsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attachment{}
	if err = randomize.Struct(seed, o, attachmentDBTypes, true, attachmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attachment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Attachments().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	attachmentDBTypes = map[string]string{`ID`: `int`, `FilePath`: `varchar`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`, `OrderID`: `int`, `FilePathTwo`: `varchar`, `FilePathThree`: `varchar`}
	_                 = bytes.MinRead
)

func testAttachmentsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(attachmentPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(attachmentAllColumns) == len(attachmentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Attachment{}
	if err = randomize.Struct(seed, o, attachmentDBTypes, true, attachmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attachment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Attachments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, attachmentDBTypes, true, attachmentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Attachment struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAttachmentsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(attachmentAllColumns) == len(attachmentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Attachment{}
	if err = randomize.Struct(seed, o, attachmentDBTypes, true, attachmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attachment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Attachments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, attachmentDBTypes, true, attachmentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Attachment struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(attachmentAllColumns, attachmentPrimaryKeyColumns) {
		fields = attachmentAllColumns
	} else {
		fields = strmangle.SetComplement(
			attachmentAllColumns,
			attachmentPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AttachmentSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAttachmentsUpsert(t *testing.T) {
	t.Parallel()

	if len(attachmentAllColumns) == len(attachmentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLAttachmentUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Attachment{}
	if err = randomize.Struct(seed, &o, attachmentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Attachment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Attachment: %s", err)
	}

	count, err := Attachments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, attachmentDBTypes, false, attachmentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Attachment struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Attachment: %s", err)
	}

	count, err = Attachments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
