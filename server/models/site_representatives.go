// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SiteRepresentative is an object representing the database table.
type SiteRepresentative struct {
	ID        uint        `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name      null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Mail      null.String `boil:"mail" json:"mail,omitempty" toml:"mail" yaml:"mail,omitempty"`
	Phone     null.String `boil:"phone" json:"phone,omitempty" toml:"phone" yaml:"phone,omitempty"`
	CreatedAt null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *siteRepresentativeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L siteRepresentativeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SiteRepresentativeColumns = struct {
	ID        string
	Name      string
	Mail      string
	Phone     string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	Name:      "name",
	Mail:      "mail",
	Phone:     "phone",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var SiteRepresentativeTableColumns = struct {
	ID        string
	Name      string
	Mail      string
	Phone     string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "site_representatives.id",
	Name:      "site_representatives.name",
	Mail:      "site_representatives.mail",
	Phone:     "site_representatives.phone",
	CreatedAt: "site_representatives.created_at",
	UpdatedAt: "site_representatives.updated_at",
}

// Generated where

var SiteRepresentativeWhere = struct {
	ID        whereHelperuint
	Name      whereHelpernull_String
	Mail      whereHelpernull_String
	Phone     whereHelpernull_String
	CreatedAt whereHelpernull_Time
	UpdatedAt whereHelpernull_Time
}{
	ID:        whereHelperuint{field: "`site_representatives`.`id`"},
	Name:      whereHelpernull_String{field: "`site_representatives`.`name`"},
	Mail:      whereHelpernull_String{field: "`site_representatives`.`mail`"},
	Phone:     whereHelpernull_String{field: "`site_representatives`.`phone`"},
	CreatedAt: whereHelpernull_Time{field: "`site_representatives`.`created_at`"},
	UpdatedAt: whereHelpernull_Time{field: "`site_representatives`.`updated_at`"},
}

// SiteRepresentativeRels is where relationship names are stored.
var SiteRepresentativeRels = struct {
}{}

// siteRepresentativeR is where relationships are stored.
type siteRepresentativeR struct {
}

// NewStruct creates a new relationship struct
func (*siteRepresentativeR) NewStruct() *siteRepresentativeR {
	return &siteRepresentativeR{}
}

// siteRepresentativeL is where Load methods for each relationship are stored.
type siteRepresentativeL struct{}

var (
	siteRepresentativeAllColumns            = []string{"id", "name", "mail", "phone", "created_at", "updated_at"}
	siteRepresentativeColumnsWithoutDefault = []string{"name", "mail", "phone", "created_at", "updated_at"}
	siteRepresentativeColumnsWithDefault    = []string{"id"}
	siteRepresentativePrimaryKeyColumns     = []string{"id"}
)

type (
	// SiteRepresentativeSlice is an alias for a slice of pointers to SiteRepresentative.
	// This should almost always be used instead of []SiteRepresentative.
	SiteRepresentativeSlice []*SiteRepresentative
	// SiteRepresentativeHook is the signature for custom SiteRepresentative hook methods
	SiteRepresentativeHook func(context.Context, boil.ContextExecutor, *SiteRepresentative) error

	siteRepresentativeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	siteRepresentativeType                 = reflect.TypeOf(&SiteRepresentative{})
	siteRepresentativeMapping              = queries.MakeStructMapping(siteRepresentativeType)
	siteRepresentativePrimaryKeyMapping, _ = queries.BindMapping(siteRepresentativeType, siteRepresentativeMapping, siteRepresentativePrimaryKeyColumns)
	siteRepresentativeInsertCacheMut       sync.RWMutex
	siteRepresentativeInsertCache          = make(map[string]insertCache)
	siteRepresentativeUpdateCacheMut       sync.RWMutex
	siteRepresentativeUpdateCache          = make(map[string]updateCache)
	siteRepresentativeUpsertCacheMut       sync.RWMutex
	siteRepresentativeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var siteRepresentativeBeforeInsertHooks []SiteRepresentativeHook
var siteRepresentativeBeforeUpdateHooks []SiteRepresentativeHook
var siteRepresentativeBeforeDeleteHooks []SiteRepresentativeHook
var siteRepresentativeBeforeUpsertHooks []SiteRepresentativeHook

var siteRepresentativeAfterInsertHooks []SiteRepresentativeHook
var siteRepresentativeAfterSelectHooks []SiteRepresentativeHook
var siteRepresentativeAfterUpdateHooks []SiteRepresentativeHook
var siteRepresentativeAfterDeleteHooks []SiteRepresentativeHook
var siteRepresentativeAfterUpsertHooks []SiteRepresentativeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SiteRepresentative) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteRepresentativeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SiteRepresentative) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteRepresentativeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SiteRepresentative) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteRepresentativeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SiteRepresentative) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteRepresentativeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SiteRepresentative) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteRepresentativeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SiteRepresentative) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteRepresentativeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SiteRepresentative) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteRepresentativeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SiteRepresentative) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteRepresentativeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SiteRepresentative) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range siteRepresentativeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSiteRepresentativeHook registers your hook function for all future operations.
func AddSiteRepresentativeHook(hookPoint boil.HookPoint, siteRepresentativeHook SiteRepresentativeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		siteRepresentativeBeforeInsertHooks = append(siteRepresentativeBeforeInsertHooks, siteRepresentativeHook)
	case boil.BeforeUpdateHook:
		siteRepresentativeBeforeUpdateHooks = append(siteRepresentativeBeforeUpdateHooks, siteRepresentativeHook)
	case boil.BeforeDeleteHook:
		siteRepresentativeBeforeDeleteHooks = append(siteRepresentativeBeforeDeleteHooks, siteRepresentativeHook)
	case boil.BeforeUpsertHook:
		siteRepresentativeBeforeUpsertHooks = append(siteRepresentativeBeforeUpsertHooks, siteRepresentativeHook)
	case boil.AfterInsertHook:
		siteRepresentativeAfterInsertHooks = append(siteRepresentativeAfterInsertHooks, siteRepresentativeHook)
	case boil.AfterSelectHook:
		siteRepresentativeAfterSelectHooks = append(siteRepresentativeAfterSelectHooks, siteRepresentativeHook)
	case boil.AfterUpdateHook:
		siteRepresentativeAfterUpdateHooks = append(siteRepresentativeAfterUpdateHooks, siteRepresentativeHook)
	case boil.AfterDeleteHook:
		siteRepresentativeAfterDeleteHooks = append(siteRepresentativeAfterDeleteHooks, siteRepresentativeHook)
	case boil.AfterUpsertHook:
		siteRepresentativeAfterUpsertHooks = append(siteRepresentativeAfterUpsertHooks, siteRepresentativeHook)
	}
}

// One returns a single siteRepresentative record from the query.
func (q siteRepresentativeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SiteRepresentative, error) {
	o := &SiteRepresentative{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for site_representatives")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SiteRepresentative records from the query.
func (q siteRepresentativeQuery) All(ctx context.Context, exec boil.ContextExecutor) (SiteRepresentativeSlice, error) {
	var o []*SiteRepresentative

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SiteRepresentative slice")
	}

	if len(siteRepresentativeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SiteRepresentative records in the query.
func (q siteRepresentativeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count site_representatives rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q siteRepresentativeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if site_representatives exists")
	}

	return count > 0, nil
}

// SiteRepresentatives retrieves all the records using an executor.
func SiteRepresentatives(mods ...qm.QueryMod) siteRepresentativeQuery {
	mods = append(mods, qm.From("`site_representatives`"))
	return siteRepresentativeQuery{NewQuery(mods...)}
}

// FindSiteRepresentative retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSiteRepresentative(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*SiteRepresentative, error) {
	siteRepresentativeObj := &SiteRepresentative{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `site_representatives` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, siteRepresentativeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from site_representatives")
	}

	if err = siteRepresentativeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return siteRepresentativeObj, err
	}

	return siteRepresentativeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SiteRepresentative) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no site_representatives provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(siteRepresentativeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	siteRepresentativeInsertCacheMut.RLock()
	cache, cached := siteRepresentativeInsertCache[key]
	siteRepresentativeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			siteRepresentativeAllColumns,
			siteRepresentativeColumnsWithDefault,
			siteRepresentativeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(siteRepresentativeType, siteRepresentativeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(siteRepresentativeType, siteRepresentativeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `site_representatives` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `site_representatives` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `site_representatives` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, siteRepresentativePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into site_representatives")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == siteRepresentativeMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for site_representatives")
	}

CacheNoHooks:
	if !cached {
		siteRepresentativeInsertCacheMut.Lock()
		siteRepresentativeInsertCache[key] = cache
		siteRepresentativeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SiteRepresentative.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SiteRepresentative) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	siteRepresentativeUpdateCacheMut.RLock()
	cache, cached := siteRepresentativeUpdateCache[key]
	siteRepresentativeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			siteRepresentativeAllColumns,
			siteRepresentativePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update site_representatives, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `site_representatives` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, siteRepresentativePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(siteRepresentativeType, siteRepresentativeMapping, append(wl, siteRepresentativePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update site_representatives row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for site_representatives")
	}

	if !cached {
		siteRepresentativeUpdateCacheMut.Lock()
		siteRepresentativeUpdateCache[key] = cache
		siteRepresentativeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q siteRepresentativeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for site_representatives")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for site_representatives")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SiteRepresentativeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), siteRepresentativePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `site_representatives` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, siteRepresentativePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in siteRepresentative slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all siteRepresentative")
	}
	return rowsAff, nil
}

var mySQLSiteRepresentativeUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SiteRepresentative) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no site_representatives provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(siteRepresentativeColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSiteRepresentativeUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	siteRepresentativeUpsertCacheMut.RLock()
	cache, cached := siteRepresentativeUpsertCache[key]
	siteRepresentativeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			siteRepresentativeAllColumns,
			siteRepresentativeColumnsWithDefault,
			siteRepresentativeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			siteRepresentativeAllColumns,
			siteRepresentativePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert site_representatives, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`site_representatives`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `site_representatives` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(siteRepresentativeType, siteRepresentativeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(siteRepresentativeType, siteRepresentativeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for site_representatives")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == siteRepresentativeMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(siteRepresentativeType, siteRepresentativeMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for site_representatives")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for site_representatives")
	}

CacheNoHooks:
	if !cached {
		siteRepresentativeUpsertCacheMut.Lock()
		siteRepresentativeUpsertCache[key] = cache
		siteRepresentativeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SiteRepresentative record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SiteRepresentative) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SiteRepresentative provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), siteRepresentativePrimaryKeyMapping)
	sql := "DELETE FROM `site_representatives` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from site_representatives")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for site_representatives")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q siteRepresentativeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no siteRepresentativeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from site_representatives")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for site_representatives")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SiteRepresentativeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(siteRepresentativeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), siteRepresentativePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `site_representatives` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, siteRepresentativePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from siteRepresentative slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for site_representatives")
	}

	if len(siteRepresentativeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SiteRepresentative) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSiteRepresentative(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SiteRepresentativeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SiteRepresentativeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), siteRepresentativePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `site_representatives`.* FROM `site_representatives` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, siteRepresentativePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SiteRepresentativeSlice")
	}

	*o = slice

	return nil
}

// SiteRepresentativeExists checks if the SiteRepresentative row exists.
func SiteRepresentativeExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `site_representatives` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if site_representatives exists")
	}

	return exists, nil
}
