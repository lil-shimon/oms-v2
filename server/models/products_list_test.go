// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testProductsLists(t *testing.T) {
	t.Parallel()

	query := ProductsLists()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testProductsListsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductsList{}
	if err = randomize.Struct(seed, o, productsListDBTypes, true, productsListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductsList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProductsLists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProductsListsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductsList{}
	if err = randomize.Struct(seed, o, productsListDBTypes, true, productsListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductsList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ProductsLists().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProductsLists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProductsListsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductsList{}
	if err = randomize.Struct(seed, o, productsListDBTypes, true, productsListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductsList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProductsListSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProductsLists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProductsListsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductsList{}
	if err = randomize.Struct(seed, o, productsListDBTypes, true, productsListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductsList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ProductsListExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ProductsList exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ProductsListExists to return true, but got false.")
	}
}

func testProductsListsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductsList{}
	if err = randomize.Struct(seed, o, productsListDBTypes, true, productsListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductsList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	productsListFound, err := FindProductsList(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if productsListFound == nil {
		t.Error("want a record, got nil")
	}
}

func testProductsListsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductsList{}
	if err = randomize.Struct(seed, o, productsListDBTypes, true, productsListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductsList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ProductsLists().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testProductsListsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductsList{}
	if err = randomize.Struct(seed, o, productsListDBTypes, true, productsListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductsList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ProductsLists().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testProductsListsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	productsListOne := &ProductsList{}
	productsListTwo := &ProductsList{}
	if err = randomize.Struct(seed, productsListOne, productsListDBTypes, false, productsListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductsList struct: %s", err)
	}
	if err = randomize.Struct(seed, productsListTwo, productsListDBTypes, false, productsListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductsList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = productsListOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = productsListTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProductsLists().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testProductsListsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	productsListOne := &ProductsList{}
	productsListTwo := &ProductsList{}
	if err = randomize.Struct(seed, productsListOne, productsListDBTypes, false, productsListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductsList struct: %s", err)
	}
	if err = randomize.Struct(seed, productsListTwo, productsListDBTypes, false, productsListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductsList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = productsListOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = productsListTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProductsLists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func productsListBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ProductsList) error {
	*o = ProductsList{}
	return nil
}

func productsListAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ProductsList) error {
	*o = ProductsList{}
	return nil
}

func productsListAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ProductsList) error {
	*o = ProductsList{}
	return nil
}

func productsListBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ProductsList) error {
	*o = ProductsList{}
	return nil
}

func productsListAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ProductsList) error {
	*o = ProductsList{}
	return nil
}

func productsListBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ProductsList) error {
	*o = ProductsList{}
	return nil
}

func productsListAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ProductsList) error {
	*o = ProductsList{}
	return nil
}

func productsListBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ProductsList) error {
	*o = ProductsList{}
	return nil
}

func productsListAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ProductsList) error {
	*o = ProductsList{}
	return nil
}

func testProductsListsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ProductsList{}
	o := &ProductsList{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, productsListDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ProductsList object: %s", err)
	}

	AddProductsListHook(boil.BeforeInsertHook, productsListBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	productsListBeforeInsertHooks = []ProductsListHook{}

	AddProductsListHook(boil.AfterInsertHook, productsListAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	productsListAfterInsertHooks = []ProductsListHook{}

	AddProductsListHook(boil.AfterSelectHook, productsListAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	productsListAfterSelectHooks = []ProductsListHook{}

	AddProductsListHook(boil.BeforeUpdateHook, productsListBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	productsListBeforeUpdateHooks = []ProductsListHook{}

	AddProductsListHook(boil.AfterUpdateHook, productsListAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	productsListAfterUpdateHooks = []ProductsListHook{}

	AddProductsListHook(boil.BeforeDeleteHook, productsListBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	productsListBeforeDeleteHooks = []ProductsListHook{}

	AddProductsListHook(boil.AfterDeleteHook, productsListAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	productsListAfterDeleteHooks = []ProductsListHook{}

	AddProductsListHook(boil.BeforeUpsertHook, productsListBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	productsListBeforeUpsertHooks = []ProductsListHook{}

	AddProductsListHook(boil.AfterUpsertHook, productsListAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	productsListAfterUpsertHooks = []ProductsListHook{}
}

func testProductsListsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductsList{}
	if err = randomize.Struct(seed, o, productsListDBTypes, true, productsListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductsList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProductsLists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProductsListsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductsList{}
	if err = randomize.Struct(seed, o, productsListDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ProductsList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(productsListColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ProductsLists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProductsListsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductsList{}
	if err = randomize.Struct(seed, o, productsListDBTypes, true, productsListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductsList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProductsListsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductsList{}
	if err = randomize.Struct(seed, o, productsListDBTypes, true, productsListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductsList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProductsListSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProductsListsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductsList{}
	if err = randomize.Struct(seed, o, productsListDBTypes, true, productsListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductsList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProductsLists().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	productsListDBTypes = map[string]string{`ID`: `int`, `Name`: `varchar`, `Unit`: `varchar`, `UnitPrice`: `int`, `Tax`: `double`, `DeletedAt`: `timestamp`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`, `Notes`: `varchar`, `ProductTypesID`: `int`}
	_                   = bytes.MinRead
)

func testProductsListsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(productsListPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(productsListAllColumns) == len(productsListPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProductsList{}
	if err = randomize.Struct(seed, o, productsListDBTypes, true, productsListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductsList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProductsLists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, productsListDBTypes, true, productsListPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProductsList struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testProductsListsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(productsListAllColumns) == len(productsListPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProductsList{}
	if err = randomize.Struct(seed, o, productsListDBTypes, true, productsListColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductsList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProductsLists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, productsListDBTypes, true, productsListPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProductsList struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(productsListAllColumns, productsListPrimaryKeyColumns) {
		fields = productsListAllColumns
	} else {
		fields = strmangle.SetComplement(
			productsListAllColumns,
			productsListPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ProductsListSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testProductsListsUpsert(t *testing.T) {
	t.Parallel()

	if len(productsListAllColumns) == len(productsListPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLProductsListUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ProductsList{}
	if err = randomize.Struct(seed, &o, productsListDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ProductsList struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProductsList: %s", err)
	}

	count, err := ProductsLists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, productsListDBTypes, false, productsListPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProductsList struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProductsList: %s", err)
	}

	count, err = ProductsLists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
