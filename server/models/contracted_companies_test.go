// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testContractedCompanies(t *testing.T) {
	t.Parallel()

	query := ContractedCompanies()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testContractedCompaniesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContractedCompany{}
	if err = randomize.Struct(seed, o, contractedCompanyDBTypes, true, contractedCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractedCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ContractedCompanies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testContractedCompaniesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContractedCompany{}
	if err = randomize.Struct(seed, o, contractedCompanyDBTypes, true, contractedCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractedCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ContractedCompanies().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ContractedCompanies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testContractedCompaniesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContractedCompany{}
	if err = randomize.Struct(seed, o, contractedCompanyDBTypes, true, contractedCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractedCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ContractedCompanySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ContractedCompanies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testContractedCompaniesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContractedCompany{}
	if err = randomize.Struct(seed, o, contractedCompanyDBTypes, true, contractedCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractedCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ContractedCompanyExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ContractedCompany exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ContractedCompanyExists to return true, but got false.")
	}
}

func testContractedCompaniesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContractedCompany{}
	if err = randomize.Struct(seed, o, contractedCompanyDBTypes, true, contractedCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractedCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	contractedCompanyFound, err := FindContractedCompany(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if contractedCompanyFound == nil {
		t.Error("want a record, got nil")
	}
}

func testContractedCompaniesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContractedCompany{}
	if err = randomize.Struct(seed, o, contractedCompanyDBTypes, true, contractedCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractedCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ContractedCompanies().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testContractedCompaniesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContractedCompany{}
	if err = randomize.Struct(seed, o, contractedCompanyDBTypes, true, contractedCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractedCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ContractedCompanies().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testContractedCompaniesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	contractedCompanyOne := &ContractedCompany{}
	contractedCompanyTwo := &ContractedCompany{}
	if err = randomize.Struct(seed, contractedCompanyOne, contractedCompanyDBTypes, false, contractedCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractedCompany struct: %s", err)
	}
	if err = randomize.Struct(seed, contractedCompanyTwo, contractedCompanyDBTypes, false, contractedCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractedCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = contractedCompanyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = contractedCompanyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ContractedCompanies().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testContractedCompaniesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	contractedCompanyOne := &ContractedCompany{}
	contractedCompanyTwo := &ContractedCompany{}
	if err = randomize.Struct(seed, contractedCompanyOne, contractedCompanyDBTypes, false, contractedCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractedCompany struct: %s", err)
	}
	if err = randomize.Struct(seed, contractedCompanyTwo, contractedCompanyDBTypes, false, contractedCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractedCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = contractedCompanyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = contractedCompanyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ContractedCompanies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func contractedCompanyBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ContractedCompany) error {
	*o = ContractedCompany{}
	return nil
}

func contractedCompanyAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ContractedCompany) error {
	*o = ContractedCompany{}
	return nil
}

func contractedCompanyAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ContractedCompany) error {
	*o = ContractedCompany{}
	return nil
}

func contractedCompanyBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ContractedCompany) error {
	*o = ContractedCompany{}
	return nil
}

func contractedCompanyAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ContractedCompany) error {
	*o = ContractedCompany{}
	return nil
}

func contractedCompanyBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ContractedCompany) error {
	*o = ContractedCompany{}
	return nil
}

func contractedCompanyAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ContractedCompany) error {
	*o = ContractedCompany{}
	return nil
}

func contractedCompanyBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ContractedCompany) error {
	*o = ContractedCompany{}
	return nil
}

func contractedCompanyAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ContractedCompany) error {
	*o = ContractedCompany{}
	return nil
}

func testContractedCompaniesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ContractedCompany{}
	o := &ContractedCompany{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, contractedCompanyDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ContractedCompany object: %s", err)
	}

	AddContractedCompanyHook(boil.BeforeInsertHook, contractedCompanyBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	contractedCompanyBeforeInsertHooks = []ContractedCompanyHook{}

	AddContractedCompanyHook(boil.AfterInsertHook, contractedCompanyAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	contractedCompanyAfterInsertHooks = []ContractedCompanyHook{}

	AddContractedCompanyHook(boil.AfterSelectHook, contractedCompanyAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	contractedCompanyAfterSelectHooks = []ContractedCompanyHook{}

	AddContractedCompanyHook(boil.BeforeUpdateHook, contractedCompanyBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	contractedCompanyBeforeUpdateHooks = []ContractedCompanyHook{}

	AddContractedCompanyHook(boil.AfterUpdateHook, contractedCompanyAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	contractedCompanyAfterUpdateHooks = []ContractedCompanyHook{}

	AddContractedCompanyHook(boil.BeforeDeleteHook, contractedCompanyBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	contractedCompanyBeforeDeleteHooks = []ContractedCompanyHook{}

	AddContractedCompanyHook(boil.AfterDeleteHook, contractedCompanyAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	contractedCompanyAfterDeleteHooks = []ContractedCompanyHook{}

	AddContractedCompanyHook(boil.BeforeUpsertHook, contractedCompanyBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	contractedCompanyBeforeUpsertHooks = []ContractedCompanyHook{}

	AddContractedCompanyHook(boil.AfterUpsertHook, contractedCompanyAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	contractedCompanyAfterUpsertHooks = []ContractedCompanyHook{}
}

func testContractedCompaniesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContractedCompany{}
	if err = randomize.Struct(seed, o, contractedCompanyDBTypes, true, contractedCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractedCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ContractedCompanies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testContractedCompaniesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContractedCompany{}
	if err = randomize.Struct(seed, o, contractedCompanyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ContractedCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(contractedCompanyColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ContractedCompanies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testContractedCompanyToOneDocumentUsingDocument(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ContractedCompany
	var foreign Document

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, contractedCompanyDBTypes, false, contractedCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractedCompany struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, documentDBTypes, false, documentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.DocumentID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Document().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ContractedCompanySlice{&local}
	if err = local.L.LoadDocument(ctx, tx, false, (*[]*ContractedCompany)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Document == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Document = nil
	if err = local.L.LoadDocument(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Document == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testContractedCompanyToOneSetOpDocumentUsingDocument(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ContractedCompany
	var b, c Document

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, contractedCompanyDBTypes, false, strmangle.SetComplement(contractedCompanyPrimaryKeyColumns, contractedCompanyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, documentDBTypes, false, strmangle.SetComplement(documentPrimaryKeyColumns, documentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, documentDBTypes, false, strmangle.SetComplement(documentPrimaryKeyColumns, documentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Document{&b, &c} {
		err = a.SetDocument(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Document != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ContractedCompanies[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DocumentID != x.ID {
			t.Error("foreign key was wrong value", a.DocumentID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DocumentID))
		reflect.Indirect(reflect.ValueOf(&a.DocumentID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.DocumentID != x.ID {
			t.Error("foreign key was wrong value", a.DocumentID, x.ID)
		}
	}
}

func testContractedCompaniesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContractedCompany{}
	if err = randomize.Struct(seed, o, contractedCompanyDBTypes, true, contractedCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractedCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testContractedCompaniesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContractedCompany{}
	if err = randomize.Struct(seed, o, contractedCompanyDBTypes, true, contractedCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractedCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ContractedCompanySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testContractedCompaniesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContractedCompany{}
	if err = randomize.Struct(seed, o, contractedCompanyDBTypes, true, contractedCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractedCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ContractedCompanies().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	contractedCompanyDBTypes = map[string]string{`ID`: `int`, `DocumentID`: `int`, `Name`: `varchar`, `PersonInCharge`: `varchar`, `HonorificTitle`: `varchar`, `DeletedAt`: `timestamp`, `OrderID`: `int`, `Tel`: `varchar`, `SiteName`: `varchar`, `SiteRepresentative`: `varchar`, `SiteRepresentativePhone`: `varchar`, `Mail`: `varchar`, `Address`: `varchar`}
	_                        = bytes.MinRead
)

func testContractedCompaniesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(contractedCompanyPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(contractedCompanyAllColumns) == len(contractedCompanyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ContractedCompany{}
	if err = randomize.Struct(seed, o, contractedCompanyDBTypes, true, contractedCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractedCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ContractedCompanies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, contractedCompanyDBTypes, true, contractedCompanyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ContractedCompany struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testContractedCompaniesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(contractedCompanyAllColumns) == len(contractedCompanyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ContractedCompany{}
	if err = randomize.Struct(seed, o, contractedCompanyDBTypes, true, contractedCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractedCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ContractedCompanies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, contractedCompanyDBTypes, true, contractedCompanyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ContractedCompany struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(contractedCompanyAllColumns, contractedCompanyPrimaryKeyColumns) {
		fields = contractedCompanyAllColumns
	} else {
		fields = strmangle.SetComplement(
			contractedCompanyAllColumns,
			contractedCompanyPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ContractedCompanySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testContractedCompaniesUpsert(t *testing.T) {
	t.Parallel()

	if len(contractedCompanyAllColumns) == len(contractedCompanyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLContractedCompanyUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ContractedCompany{}
	if err = randomize.Struct(seed, &o, contractedCompanyDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ContractedCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ContractedCompany: %s", err)
	}

	count, err := ContractedCompanies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, contractedCompanyDBTypes, false, contractedCompanyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ContractedCompany struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ContractedCompany: %s", err)
	}

	count, err = ContractedCompanies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
