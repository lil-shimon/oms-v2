// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PurchasedProduct is an object representing the database table.
type PurchasedProduct struct {
	ID         uint        `boil:"id" json:"id" toml:"id" yaml:"id"`
	DocumentID uint        `boil:"document_id" json:"document_id" toml:"document_id" yaml:"document_id"`
	Name       string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Number     null.Int    `boil:"number" json:"number,omitempty" toml:"number" yaml:"number,omitempty"`
	Unit       null.String `boil:"unit" json:"unit,omitempty" toml:"unit" yaml:"unit,omitempty"`
	UnitPrice  null.Int    `boil:"unit_price" json:"unit_price,omitempty" toml:"unit_price" yaml:"unit_price,omitempty"`
	DeletedAt  null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	Notes      null.String `boil:"notes" json:"notes,omitempty" toml:"notes" yaml:"notes,omitempty"`
	CreatedAt  null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt  null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *purchasedProductR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L purchasedProductL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PurchasedProductColumns = struct {
	ID         string
	DocumentID string
	Name       string
	Number     string
	Unit       string
	UnitPrice  string
	DeletedAt  string
	Notes      string
	CreatedAt  string
	UpdatedAt  string
}{
	ID:         "id",
	DocumentID: "document_id",
	Name:       "name",
	Number:     "number",
	Unit:       "unit",
	UnitPrice:  "unit_price",
	DeletedAt:  "deleted_at",
	Notes:      "notes",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
}

var PurchasedProductTableColumns = struct {
	ID         string
	DocumentID string
	Name       string
	Number     string
	Unit       string
	UnitPrice  string
	DeletedAt  string
	Notes      string
	CreatedAt  string
	UpdatedAt  string
}{
	ID:         "purchased_products.id",
	DocumentID: "purchased_products.document_id",
	Name:       "purchased_products.name",
	Number:     "purchased_products.number",
	Unit:       "purchased_products.unit",
	UnitPrice:  "purchased_products.unit_price",
	DeletedAt:  "purchased_products.deleted_at",
	Notes:      "purchased_products.notes",
	CreatedAt:  "purchased_products.created_at",
	UpdatedAt:  "purchased_products.updated_at",
}

// Generated where

var PurchasedProductWhere = struct {
	ID         whereHelperuint
	DocumentID whereHelperuint
	Name       whereHelperstring
	Number     whereHelpernull_Int
	Unit       whereHelpernull_String
	UnitPrice  whereHelpernull_Int
	DeletedAt  whereHelpernull_Time
	Notes      whereHelpernull_String
	CreatedAt  whereHelpernull_Time
	UpdatedAt  whereHelpernull_Time
}{
	ID:         whereHelperuint{field: "`purchased_products`.`id`"},
	DocumentID: whereHelperuint{field: "`purchased_products`.`document_id`"},
	Name:       whereHelperstring{field: "`purchased_products`.`name`"},
	Number:     whereHelpernull_Int{field: "`purchased_products`.`number`"},
	Unit:       whereHelpernull_String{field: "`purchased_products`.`unit`"},
	UnitPrice:  whereHelpernull_Int{field: "`purchased_products`.`unit_price`"},
	DeletedAt:  whereHelpernull_Time{field: "`purchased_products`.`deleted_at`"},
	Notes:      whereHelpernull_String{field: "`purchased_products`.`notes`"},
	CreatedAt:  whereHelpernull_Time{field: "`purchased_products`.`created_at`"},
	UpdatedAt:  whereHelpernull_Time{field: "`purchased_products`.`updated_at`"},
}

// PurchasedProductRels is where relationship names are stored.
var PurchasedProductRels = struct {
}{}

// purchasedProductR is where relationships are stored.
type purchasedProductR struct {
}

// NewStruct creates a new relationship struct
func (*purchasedProductR) NewStruct() *purchasedProductR {
	return &purchasedProductR{}
}

// purchasedProductL is where Load methods for each relationship are stored.
type purchasedProductL struct{}

var (
	purchasedProductAllColumns            = []string{"id", "document_id", "name", "number", "unit", "unit_price", "deleted_at", "notes", "created_at", "updated_at"}
	purchasedProductColumnsWithoutDefault = []string{"document_id", "name", "number", "unit", "unit_price", "deleted_at", "notes", "created_at", "updated_at"}
	purchasedProductColumnsWithDefault    = []string{"id"}
	purchasedProductPrimaryKeyColumns     = []string{"id"}
)

type (
	// PurchasedProductSlice is an alias for a slice of pointers to PurchasedProduct.
	// This should almost always be used instead of []PurchasedProduct.
	PurchasedProductSlice []*PurchasedProduct
	// PurchasedProductHook is the signature for custom PurchasedProduct hook methods
	PurchasedProductHook func(context.Context, boil.ContextExecutor, *PurchasedProduct) error

	purchasedProductQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	purchasedProductType                 = reflect.TypeOf(&PurchasedProduct{})
	purchasedProductMapping              = queries.MakeStructMapping(purchasedProductType)
	purchasedProductPrimaryKeyMapping, _ = queries.BindMapping(purchasedProductType, purchasedProductMapping, purchasedProductPrimaryKeyColumns)
	purchasedProductInsertCacheMut       sync.RWMutex
	purchasedProductInsertCache          = make(map[string]insertCache)
	purchasedProductUpdateCacheMut       sync.RWMutex
	purchasedProductUpdateCache          = make(map[string]updateCache)
	purchasedProductUpsertCacheMut       sync.RWMutex
	purchasedProductUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var purchasedProductBeforeInsertHooks []PurchasedProductHook
var purchasedProductBeforeUpdateHooks []PurchasedProductHook
var purchasedProductBeforeDeleteHooks []PurchasedProductHook
var purchasedProductBeforeUpsertHooks []PurchasedProductHook

var purchasedProductAfterInsertHooks []PurchasedProductHook
var purchasedProductAfterSelectHooks []PurchasedProductHook
var purchasedProductAfterUpdateHooks []PurchasedProductHook
var purchasedProductAfterDeleteHooks []PurchasedProductHook
var purchasedProductAfterUpsertHooks []PurchasedProductHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PurchasedProduct) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchasedProductBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PurchasedProduct) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchasedProductBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PurchasedProduct) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchasedProductBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PurchasedProduct) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchasedProductBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PurchasedProduct) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchasedProductAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PurchasedProduct) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchasedProductAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PurchasedProduct) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchasedProductAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PurchasedProduct) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchasedProductAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PurchasedProduct) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchasedProductAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPurchasedProductHook registers your hook function for all future operations.
func AddPurchasedProductHook(hookPoint boil.HookPoint, purchasedProductHook PurchasedProductHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		purchasedProductBeforeInsertHooks = append(purchasedProductBeforeInsertHooks, purchasedProductHook)
	case boil.BeforeUpdateHook:
		purchasedProductBeforeUpdateHooks = append(purchasedProductBeforeUpdateHooks, purchasedProductHook)
	case boil.BeforeDeleteHook:
		purchasedProductBeforeDeleteHooks = append(purchasedProductBeforeDeleteHooks, purchasedProductHook)
	case boil.BeforeUpsertHook:
		purchasedProductBeforeUpsertHooks = append(purchasedProductBeforeUpsertHooks, purchasedProductHook)
	case boil.AfterInsertHook:
		purchasedProductAfterInsertHooks = append(purchasedProductAfterInsertHooks, purchasedProductHook)
	case boil.AfterSelectHook:
		purchasedProductAfterSelectHooks = append(purchasedProductAfterSelectHooks, purchasedProductHook)
	case boil.AfterUpdateHook:
		purchasedProductAfterUpdateHooks = append(purchasedProductAfterUpdateHooks, purchasedProductHook)
	case boil.AfterDeleteHook:
		purchasedProductAfterDeleteHooks = append(purchasedProductAfterDeleteHooks, purchasedProductHook)
	case boil.AfterUpsertHook:
		purchasedProductAfterUpsertHooks = append(purchasedProductAfterUpsertHooks, purchasedProductHook)
	}
}

// One returns a single purchasedProduct record from the query.
func (q purchasedProductQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PurchasedProduct, error) {
	o := &PurchasedProduct{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for purchased_products")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PurchasedProduct records from the query.
func (q purchasedProductQuery) All(ctx context.Context, exec boil.ContextExecutor) (PurchasedProductSlice, error) {
	var o []*PurchasedProduct

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PurchasedProduct slice")
	}

	if len(purchasedProductAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PurchasedProduct records in the query.
func (q purchasedProductQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count purchased_products rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q purchasedProductQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if purchased_products exists")
	}

	return count > 0, nil
}

// PurchasedProducts retrieves all the records using an executor.
func PurchasedProducts(mods ...qm.QueryMod) purchasedProductQuery {
	mods = append(mods, qm.From("`purchased_products`"))
	return purchasedProductQuery{NewQuery(mods...)}
}

// FindPurchasedProduct retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPurchasedProduct(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*PurchasedProduct, error) {
	purchasedProductObj := &PurchasedProduct{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `purchased_products` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, purchasedProductObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from purchased_products")
	}

	if err = purchasedProductObj.doAfterSelectHooks(ctx, exec); err != nil {
		return purchasedProductObj, err
	}

	return purchasedProductObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PurchasedProduct) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no purchased_products provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(purchasedProductColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	purchasedProductInsertCacheMut.RLock()
	cache, cached := purchasedProductInsertCache[key]
	purchasedProductInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			purchasedProductAllColumns,
			purchasedProductColumnsWithDefault,
			purchasedProductColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(purchasedProductType, purchasedProductMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(purchasedProductType, purchasedProductMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `purchased_products` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `purchased_products` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `purchased_products` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, purchasedProductPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into purchased_products")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == purchasedProductMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for purchased_products")
	}

CacheNoHooks:
	if !cached {
		purchasedProductInsertCacheMut.Lock()
		purchasedProductInsertCache[key] = cache
		purchasedProductInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PurchasedProduct.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PurchasedProduct) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	purchasedProductUpdateCacheMut.RLock()
	cache, cached := purchasedProductUpdateCache[key]
	purchasedProductUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			purchasedProductAllColumns,
			purchasedProductPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update purchased_products, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `purchased_products` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, purchasedProductPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(purchasedProductType, purchasedProductMapping, append(wl, purchasedProductPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update purchased_products row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for purchased_products")
	}

	if !cached {
		purchasedProductUpdateCacheMut.Lock()
		purchasedProductUpdateCache[key] = cache
		purchasedProductUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q purchasedProductQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for purchased_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for purchased_products")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PurchasedProductSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), purchasedProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `purchased_products` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, purchasedProductPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in purchasedProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all purchasedProduct")
	}
	return rowsAff, nil
}

var mySQLPurchasedProductUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PurchasedProduct) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no purchased_products provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(purchasedProductColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPurchasedProductUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	purchasedProductUpsertCacheMut.RLock()
	cache, cached := purchasedProductUpsertCache[key]
	purchasedProductUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			purchasedProductAllColumns,
			purchasedProductColumnsWithDefault,
			purchasedProductColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			purchasedProductAllColumns,
			purchasedProductPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert purchased_products, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`purchased_products`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `purchased_products` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(purchasedProductType, purchasedProductMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(purchasedProductType, purchasedProductMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for purchased_products")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == purchasedProductMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(purchasedProductType, purchasedProductMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for purchased_products")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for purchased_products")
	}

CacheNoHooks:
	if !cached {
		purchasedProductUpsertCacheMut.Lock()
		purchasedProductUpsertCache[key] = cache
		purchasedProductUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PurchasedProduct record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PurchasedProduct) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PurchasedProduct provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), purchasedProductPrimaryKeyMapping)
	sql := "DELETE FROM `purchased_products` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from purchased_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for purchased_products")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q purchasedProductQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no purchasedProductQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from purchased_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for purchased_products")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PurchasedProductSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(purchasedProductBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), purchasedProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `purchased_products` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, purchasedProductPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from purchasedProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for purchased_products")
	}

	if len(purchasedProductAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PurchasedProduct) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPurchasedProduct(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PurchasedProductSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PurchasedProductSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), purchasedProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `purchased_products`.* FROM `purchased_products` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, purchasedProductPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PurchasedProductSlice")
	}

	*o = slice

	return nil
}

// PurchasedProductExists checks if the PurchasedProduct row exists.
func PurchasedProductExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `purchased_products` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if purchased_products exists")
	}

	return exists, nil
}
