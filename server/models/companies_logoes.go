// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CompaniesLogo is an object representing the database table.
type CompaniesLogo struct {
	ID        uint        `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name      null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	ImgPath   null.String `boil:"img_path" json:"img_path,omitempty" toml:"img_path" yaml:"img_path,omitempty"`
	DeletedAt null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	CreatedAt null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *companiesLogoR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L companiesLogoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CompaniesLogoColumns = struct {
	ID        string
	Name      string
	ImgPath   string
	DeletedAt string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	Name:      "name",
	ImgPath:   "img_path",
	DeletedAt: "deleted_at",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var CompaniesLogoTableColumns = struct {
	ID        string
	Name      string
	ImgPath   string
	DeletedAt string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "companies_logoes.id",
	Name:      "companies_logoes.name",
	ImgPath:   "companies_logoes.img_path",
	DeletedAt: "companies_logoes.deleted_at",
	CreatedAt: "companies_logoes.created_at",
	UpdatedAt: "companies_logoes.updated_at",
}

// Generated where

var CompaniesLogoWhere = struct {
	ID        whereHelperuint
	Name      whereHelpernull_String
	ImgPath   whereHelpernull_String
	DeletedAt whereHelpernull_Time
	CreatedAt whereHelpernull_Time
	UpdatedAt whereHelpernull_Time
}{
	ID:        whereHelperuint{field: "`companies_logoes`.`id`"},
	Name:      whereHelpernull_String{field: "`companies_logoes`.`name`"},
	ImgPath:   whereHelpernull_String{field: "`companies_logoes`.`img_path`"},
	DeletedAt: whereHelpernull_Time{field: "`companies_logoes`.`deleted_at`"},
	CreatedAt: whereHelpernull_Time{field: "`companies_logoes`.`created_at`"},
	UpdatedAt: whereHelpernull_Time{field: "`companies_logoes`.`updated_at`"},
}

// CompaniesLogoRels is where relationship names are stored.
var CompaniesLogoRels = struct {
}{}

// companiesLogoR is where relationships are stored.
type companiesLogoR struct {
}

// NewStruct creates a new relationship struct
func (*companiesLogoR) NewStruct() *companiesLogoR {
	return &companiesLogoR{}
}

// companiesLogoL is where Load methods for each relationship are stored.
type companiesLogoL struct{}

var (
	companiesLogoAllColumns            = []string{"id", "name", "img_path", "deleted_at", "created_at", "updated_at"}
	companiesLogoColumnsWithoutDefault = []string{"name", "img_path", "deleted_at", "created_at", "updated_at"}
	companiesLogoColumnsWithDefault    = []string{"id"}
	companiesLogoPrimaryKeyColumns     = []string{"id"}
)

type (
	// CompaniesLogoSlice is an alias for a slice of pointers to CompaniesLogo.
	// This should almost always be used instead of []CompaniesLogo.
	CompaniesLogoSlice []*CompaniesLogo
	// CompaniesLogoHook is the signature for custom CompaniesLogo hook methods
	CompaniesLogoHook func(context.Context, boil.ContextExecutor, *CompaniesLogo) error

	companiesLogoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	companiesLogoType                 = reflect.TypeOf(&CompaniesLogo{})
	companiesLogoMapping              = queries.MakeStructMapping(companiesLogoType)
	companiesLogoPrimaryKeyMapping, _ = queries.BindMapping(companiesLogoType, companiesLogoMapping, companiesLogoPrimaryKeyColumns)
	companiesLogoInsertCacheMut       sync.RWMutex
	companiesLogoInsertCache          = make(map[string]insertCache)
	companiesLogoUpdateCacheMut       sync.RWMutex
	companiesLogoUpdateCache          = make(map[string]updateCache)
	companiesLogoUpsertCacheMut       sync.RWMutex
	companiesLogoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var companiesLogoBeforeInsertHooks []CompaniesLogoHook
var companiesLogoBeforeUpdateHooks []CompaniesLogoHook
var companiesLogoBeforeDeleteHooks []CompaniesLogoHook
var companiesLogoBeforeUpsertHooks []CompaniesLogoHook

var companiesLogoAfterInsertHooks []CompaniesLogoHook
var companiesLogoAfterSelectHooks []CompaniesLogoHook
var companiesLogoAfterUpdateHooks []CompaniesLogoHook
var companiesLogoAfterDeleteHooks []CompaniesLogoHook
var companiesLogoAfterUpsertHooks []CompaniesLogoHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CompaniesLogo) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companiesLogoBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CompaniesLogo) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companiesLogoBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CompaniesLogo) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companiesLogoBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CompaniesLogo) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companiesLogoBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CompaniesLogo) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companiesLogoAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CompaniesLogo) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companiesLogoAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CompaniesLogo) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companiesLogoAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CompaniesLogo) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companiesLogoAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CompaniesLogo) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companiesLogoAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCompaniesLogoHook registers your hook function for all future operations.
func AddCompaniesLogoHook(hookPoint boil.HookPoint, companiesLogoHook CompaniesLogoHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		companiesLogoBeforeInsertHooks = append(companiesLogoBeforeInsertHooks, companiesLogoHook)
	case boil.BeforeUpdateHook:
		companiesLogoBeforeUpdateHooks = append(companiesLogoBeforeUpdateHooks, companiesLogoHook)
	case boil.BeforeDeleteHook:
		companiesLogoBeforeDeleteHooks = append(companiesLogoBeforeDeleteHooks, companiesLogoHook)
	case boil.BeforeUpsertHook:
		companiesLogoBeforeUpsertHooks = append(companiesLogoBeforeUpsertHooks, companiesLogoHook)
	case boil.AfterInsertHook:
		companiesLogoAfterInsertHooks = append(companiesLogoAfterInsertHooks, companiesLogoHook)
	case boil.AfterSelectHook:
		companiesLogoAfterSelectHooks = append(companiesLogoAfterSelectHooks, companiesLogoHook)
	case boil.AfterUpdateHook:
		companiesLogoAfterUpdateHooks = append(companiesLogoAfterUpdateHooks, companiesLogoHook)
	case boil.AfterDeleteHook:
		companiesLogoAfterDeleteHooks = append(companiesLogoAfterDeleteHooks, companiesLogoHook)
	case boil.AfterUpsertHook:
		companiesLogoAfterUpsertHooks = append(companiesLogoAfterUpsertHooks, companiesLogoHook)
	}
}

// One returns a single companiesLogo record from the query.
func (q companiesLogoQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CompaniesLogo, error) {
	o := &CompaniesLogo{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for companies_logoes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CompaniesLogo records from the query.
func (q companiesLogoQuery) All(ctx context.Context, exec boil.ContextExecutor) (CompaniesLogoSlice, error) {
	var o []*CompaniesLogo

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CompaniesLogo slice")
	}

	if len(companiesLogoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CompaniesLogo records in the query.
func (q companiesLogoQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count companies_logoes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q companiesLogoQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if companies_logoes exists")
	}

	return count > 0, nil
}

// CompaniesLogoes retrieves all the records using an executor.
func CompaniesLogoes(mods ...qm.QueryMod) companiesLogoQuery {
	mods = append(mods, qm.From("`companies_logoes`"))
	return companiesLogoQuery{NewQuery(mods...)}
}

// FindCompaniesLogo retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCompaniesLogo(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*CompaniesLogo, error) {
	companiesLogoObj := &CompaniesLogo{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `companies_logoes` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, companiesLogoObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from companies_logoes")
	}

	if err = companiesLogoObj.doAfterSelectHooks(ctx, exec); err != nil {
		return companiesLogoObj, err
	}

	return companiesLogoObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CompaniesLogo) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no companies_logoes provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(companiesLogoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	companiesLogoInsertCacheMut.RLock()
	cache, cached := companiesLogoInsertCache[key]
	companiesLogoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			companiesLogoAllColumns,
			companiesLogoColumnsWithDefault,
			companiesLogoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(companiesLogoType, companiesLogoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(companiesLogoType, companiesLogoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `companies_logoes` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `companies_logoes` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `companies_logoes` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, companiesLogoPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into companies_logoes")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == companiesLogoMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for companies_logoes")
	}

CacheNoHooks:
	if !cached {
		companiesLogoInsertCacheMut.Lock()
		companiesLogoInsertCache[key] = cache
		companiesLogoInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CompaniesLogo.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CompaniesLogo) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	companiesLogoUpdateCacheMut.RLock()
	cache, cached := companiesLogoUpdateCache[key]
	companiesLogoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			companiesLogoAllColumns,
			companiesLogoPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update companies_logoes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `companies_logoes` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, companiesLogoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(companiesLogoType, companiesLogoMapping, append(wl, companiesLogoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update companies_logoes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for companies_logoes")
	}

	if !cached {
		companiesLogoUpdateCacheMut.Lock()
		companiesLogoUpdateCache[key] = cache
		companiesLogoUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q companiesLogoQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for companies_logoes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for companies_logoes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CompaniesLogoSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), companiesLogoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `companies_logoes` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, companiesLogoPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in companiesLogo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all companiesLogo")
	}
	return rowsAff, nil
}

var mySQLCompaniesLogoUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CompaniesLogo) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no companies_logoes provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(companiesLogoColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCompaniesLogoUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	companiesLogoUpsertCacheMut.RLock()
	cache, cached := companiesLogoUpsertCache[key]
	companiesLogoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			companiesLogoAllColumns,
			companiesLogoColumnsWithDefault,
			companiesLogoColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			companiesLogoAllColumns,
			companiesLogoPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert companies_logoes, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`companies_logoes`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `companies_logoes` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(companiesLogoType, companiesLogoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(companiesLogoType, companiesLogoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for companies_logoes")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == companiesLogoMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(companiesLogoType, companiesLogoMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for companies_logoes")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for companies_logoes")
	}

CacheNoHooks:
	if !cached {
		companiesLogoUpsertCacheMut.Lock()
		companiesLogoUpsertCache[key] = cache
		companiesLogoUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CompaniesLogo record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CompaniesLogo) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CompaniesLogo provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), companiesLogoPrimaryKeyMapping)
	sql := "DELETE FROM `companies_logoes` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from companies_logoes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for companies_logoes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q companiesLogoQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no companiesLogoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from companies_logoes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for companies_logoes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CompaniesLogoSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(companiesLogoBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), companiesLogoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `companies_logoes` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, companiesLogoPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from companiesLogo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for companies_logoes")
	}

	if len(companiesLogoAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CompaniesLogo) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCompaniesLogo(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CompaniesLogoSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CompaniesLogoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), companiesLogoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `companies_logoes`.* FROM `companies_logoes` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, companiesLogoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CompaniesLogoSlice")
	}

	*o = slice

	return nil
}

// CompaniesLogoExists checks if the CompaniesLogo row exists.
func CompaniesLogoExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `companies_logoes` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if companies_logoes exists")
	}

	return exists, nil
}
