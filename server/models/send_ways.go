// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SendWay is an object representing the database table.
type SendWay struct {
	ID   uint64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name string `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *sendWayR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sendWayL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SendWayColumns = struct {
	ID   string
	Name string
}{
	ID:   "id",
	Name: "name",
}

var SendWayTableColumns = struct {
	ID   string
	Name string
}{
	ID:   "send_ways.id",
	Name: "send_ways.name",
}

// Generated where

var SendWayWhere = struct {
	ID   whereHelperuint64
	Name whereHelperstring
}{
	ID:   whereHelperuint64{field: "`send_ways`.`id`"},
	Name: whereHelperstring{field: "`send_ways`.`name`"},
}

// SendWayRels is where relationship names are stored.
var SendWayRels = struct {
	Companies string
}{
	Companies: "Companies",
}

// sendWayR is where relationships are stored.
type sendWayR struct {
	Companies CompanySlice `boil:"Companies" json:"Companies" toml:"Companies" yaml:"Companies"`
}

// NewStruct creates a new relationship struct
func (*sendWayR) NewStruct() *sendWayR {
	return &sendWayR{}
}

// sendWayL is where Load methods for each relationship are stored.
type sendWayL struct{}

var (
	sendWayAllColumns            = []string{"id", "name"}
	sendWayColumnsWithoutDefault = []string{"name"}
	sendWayColumnsWithDefault    = []string{"id"}
	sendWayPrimaryKeyColumns     = []string{"id"}
)

type (
	// SendWaySlice is an alias for a slice of pointers to SendWay.
	// This should almost always be used instead of []SendWay.
	SendWaySlice []*SendWay
	// SendWayHook is the signature for custom SendWay hook methods
	SendWayHook func(context.Context, boil.ContextExecutor, *SendWay) error

	sendWayQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sendWayType                 = reflect.TypeOf(&SendWay{})
	sendWayMapping              = queries.MakeStructMapping(sendWayType)
	sendWayPrimaryKeyMapping, _ = queries.BindMapping(sendWayType, sendWayMapping, sendWayPrimaryKeyColumns)
	sendWayInsertCacheMut       sync.RWMutex
	sendWayInsertCache          = make(map[string]insertCache)
	sendWayUpdateCacheMut       sync.RWMutex
	sendWayUpdateCache          = make(map[string]updateCache)
	sendWayUpsertCacheMut       sync.RWMutex
	sendWayUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sendWayBeforeInsertHooks []SendWayHook
var sendWayBeforeUpdateHooks []SendWayHook
var sendWayBeforeDeleteHooks []SendWayHook
var sendWayBeforeUpsertHooks []SendWayHook

var sendWayAfterInsertHooks []SendWayHook
var sendWayAfterSelectHooks []SendWayHook
var sendWayAfterUpdateHooks []SendWayHook
var sendWayAfterDeleteHooks []SendWayHook
var sendWayAfterUpsertHooks []SendWayHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SendWay) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sendWayBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SendWay) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sendWayBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SendWay) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sendWayBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SendWay) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sendWayBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SendWay) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sendWayAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SendWay) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sendWayAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SendWay) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sendWayAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SendWay) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sendWayAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SendWay) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sendWayAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSendWayHook registers your hook function for all future operations.
func AddSendWayHook(hookPoint boil.HookPoint, sendWayHook SendWayHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		sendWayBeforeInsertHooks = append(sendWayBeforeInsertHooks, sendWayHook)
	case boil.BeforeUpdateHook:
		sendWayBeforeUpdateHooks = append(sendWayBeforeUpdateHooks, sendWayHook)
	case boil.BeforeDeleteHook:
		sendWayBeforeDeleteHooks = append(sendWayBeforeDeleteHooks, sendWayHook)
	case boil.BeforeUpsertHook:
		sendWayBeforeUpsertHooks = append(sendWayBeforeUpsertHooks, sendWayHook)
	case boil.AfterInsertHook:
		sendWayAfterInsertHooks = append(sendWayAfterInsertHooks, sendWayHook)
	case boil.AfterSelectHook:
		sendWayAfterSelectHooks = append(sendWayAfterSelectHooks, sendWayHook)
	case boil.AfterUpdateHook:
		sendWayAfterUpdateHooks = append(sendWayAfterUpdateHooks, sendWayHook)
	case boil.AfterDeleteHook:
		sendWayAfterDeleteHooks = append(sendWayAfterDeleteHooks, sendWayHook)
	case boil.AfterUpsertHook:
		sendWayAfterUpsertHooks = append(sendWayAfterUpsertHooks, sendWayHook)
	}
}

// One returns a single sendWay record from the query.
func (q sendWayQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SendWay, error) {
	o := &SendWay{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for send_ways")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SendWay records from the query.
func (q sendWayQuery) All(ctx context.Context, exec boil.ContextExecutor) (SendWaySlice, error) {
	var o []*SendWay

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SendWay slice")
	}

	if len(sendWayAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SendWay records in the query.
func (q sendWayQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count send_ways rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sendWayQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if send_ways exists")
	}

	return count > 0, nil
}

// Companies retrieves all the company's Companies with an executor.
func (o *SendWay) Companies(mods ...qm.QueryMod) companyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`companies`.`send_way_id`=?", o.ID),
	)

	query := Companies(queryMods...)
	queries.SetFrom(query.Query, "`companies`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`companies`.*"})
	}

	return query
}

// LoadCompanies allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sendWayL) LoadCompanies(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSendWay interface{}, mods queries.Applicator) error {
	var slice []*SendWay
	var object *SendWay

	if singular {
		object = maybeSendWay.(*SendWay)
	} else {
		slice = *maybeSendWay.(*[]*SendWay)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sendWayR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sendWayR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`companies`),
		qm.WhereIn(`companies.send_way_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load companies")
	}

	var resultSlice []*Company
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice companies")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on companies")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for companies")
	}

	if len(companyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Companies = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &companyR{}
			}
			foreign.R.SendWay = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SendWayID) {
				local.R.Companies = append(local.R.Companies, foreign)
				if foreign.R == nil {
					foreign.R = &companyR{}
				}
				foreign.R.SendWay = local
				break
			}
		}
	}

	return nil
}

// AddCompanies adds the given related objects to the existing relationships
// of the send_way, optionally inserting them as new records.
// Appends related to o.R.Companies.
// Sets related.R.SendWay appropriately.
func (o *SendWay) AddCompanies(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Company) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SendWayID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `companies` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"send_way_id"}),
				strmangle.WhereClause("`", "`", 0, companyPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SendWayID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &sendWayR{
			Companies: related,
		}
	} else {
		o.R.Companies = append(o.R.Companies, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &companyR{
				SendWay: o,
			}
		} else {
			rel.R.SendWay = o
		}
	}
	return nil
}

// SetCompanies removes all previously related items of the
// send_way replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SendWay's Companies accordingly.
// Replaces o.R.Companies with related.
// Sets related.R.SendWay's Companies accordingly.
func (o *SendWay) SetCompanies(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Company) error {
	query := "update `companies` set `send_way_id` = null where `send_way_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Companies {
			queries.SetScanner(&rel.SendWayID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.SendWay = nil
		}

		o.R.Companies = nil
	}
	return o.AddCompanies(ctx, exec, insert, related...)
}

// RemoveCompanies relationships from objects passed in.
// Removes related items from R.Companies (uses pointer comparison, removal does not keep order)
// Sets related.R.SendWay.
func (o *SendWay) RemoveCompanies(ctx context.Context, exec boil.ContextExecutor, related ...*Company) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SendWayID, nil)
		if rel.R != nil {
			rel.R.SendWay = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("send_way_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Companies {
			if rel != ri {
				continue
			}

			ln := len(o.R.Companies)
			if ln > 1 && i < ln-1 {
				o.R.Companies[i] = o.R.Companies[ln-1]
			}
			o.R.Companies = o.R.Companies[:ln-1]
			break
		}
	}

	return nil
}

// SendWays retrieves all the records using an executor.
func SendWays(mods ...qm.QueryMod) sendWayQuery {
	mods = append(mods, qm.From("`send_ways`"))
	return sendWayQuery{NewQuery(mods...)}
}

// FindSendWay retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSendWay(ctx context.Context, exec boil.ContextExecutor, iD uint64, selectCols ...string) (*SendWay, error) {
	sendWayObj := &SendWay{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `send_ways` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, sendWayObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from send_ways")
	}

	if err = sendWayObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sendWayObj, err
	}

	return sendWayObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SendWay) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no send_ways provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sendWayColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sendWayInsertCacheMut.RLock()
	cache, cached := sendWayInsertCache[key]
	sendWayInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sendWayAllColumns,
			sendWayColumnsWithDefault,
			sendWayColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sendWayType, sendWayMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sendWayType, sendWayMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `send_ways` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `send_ways` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `send_ways` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sendWayPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into send_ways")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == sendWayMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for send_ways")
	}

CacheNoHooks:
	if !cached {
		sendWayInsertCacheMut.Lock()
		sendWayInsertCache[key] = cache
		sendWayInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SendWay.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SendWay) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sendWayUpdateCacheMut.RLock()
	cache, cached := sendWayUpdateCache[key]
	sendWayUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sendWayAllColumns,
			sendWayPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update send_ways, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `send_ways` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sendWayPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sendWayType, sendWayMapping, append(wl, sendWayPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update send_ways row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for send_ways")
	}

	if !cached {
		sendWayUpdateCacheMut.Lock()
		sendWayUpdateCache[key] = cache
		sendWayUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sendWayQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for send_ways")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for send_ways")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SendWaySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sendWayPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `send_ways` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sendWayPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sendWay slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sendWay")
	}
	return rowsAff, nil
}

var mySQLSendWayUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SendWay) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no send_ways provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sendWayColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSendWayUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sendWayUpsertCacheMut.RLock()
	cache, cached := sendWayUpsertCache[key]
	sendWayUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sendWayAllColumns,
			sendWayColumnsWithDefault,
			sendWayColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			sendWayAllColumns,
			sendWayPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert send_ways, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`send_ways`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `send_ways` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sendWayType, sendWayMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sendWayType, sendWayMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for send_ways")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == sendWayMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sendWayType, sendWayMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for send_ways")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for send_ways")
	}

CacheNoHooks:
	if !cached {
		sendWayUpsertCacheMut.Lock()
		sendWayUpsertCache[key] = cache
		sendWayUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SendWay record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SendWay) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SendWay provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sendWayPrimaryKeyMapping)
	sql := "DELETE FROM `send_ways` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from send_ways")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for send_ways")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sendWayQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sendWayQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from send_ways")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for send_ways")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SendWaySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sendWayBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sendWayPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `send_ways` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sendWayPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sendWay slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for send_ways")
	}

	if len(sendWayAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SendWay) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSendWay(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SendWaySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SendWaySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sendWayPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `send_ways`.* FROM `send_ways` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sendWayPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SendWaySlice")
	}

	*o = slice

	return nil
}

// SendWayExists checks if the SendWay row exists.
func SendWayExists(ctx context.Context, exec boil.ContextExecutor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `send_ways` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if send_ways exists")
	}

	return exists, nil
}
