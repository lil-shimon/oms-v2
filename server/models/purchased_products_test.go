// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPurchasedProducts(t *testing.T) {
	t.Parallel()

	query := PurchasedProducts()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPurchasedProductsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PurchasedProduct{}
	if err = randomize.Struct(seed, o, purchasedProductDBTypes, true, purchasedProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PurchasedProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PurchasedProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPurchasedProductsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PurchasedProduct{}
	if err = randomize.Struct(seed, o, purchasedProductDBTypes, true, purchasedProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PurchasedProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PurchasedProducts().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PurchasedProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPurchasedProductsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PurchasedProduct{}
	if err = randomize.Struct(seed, o, purchasedProductDBTypes, true, purchasedProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PurchasedProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PurchasedProductSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PurchasedProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPurchasedProductsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PurchasedProduct{}
	if err = randomize.Struct(seed, o, purchasedProductDBTypes, true, purchasedProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PurchasedProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PurchasedProductExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if PurchasedProduct exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PurchasedProductExists to return true, but got false.")
	}
}

func testPurchasedProductsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PurchasedProduct{}
	if err = randomize.Struct(seed, o, purchasedProductDBTypes, true, purchasedProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PurchasedProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	purchasedProductFound, err := FindPurchasedProduct(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if purchasedProductFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPurchasedProductsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PurchasedProduct{}
	if err = randomize.Struct(seed, o, purchasedProductDBTypes, true, purchasedProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PurchasedProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PurchasedProducts().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPurchasedProductsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PurchasedProduct{}
	if err = randomize.Struct(seed, o, purchasedProductDBTypes, true, purchasedProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PurchasedProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PurchasedProducts().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPurchasedProductsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	purchasedProductOne := &PurchasedProduct{}
	purchasedProductTwo := &PurchasedProduct{}
	if err = randomize.Struct(seed, purchasedProductOne, purchasedProductDBTypes, false, purchasedProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PurchasedProduct struct: %s", err)
	}
	if err = randomize.Struct(seed, purchasedProductTwo, purchasedProductDBTypes, false, purchasedProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PurchasedProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = purchasedProductOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = purchasedProductTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PurchasedProducts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPurchasedProductsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	purchasedProductOne := &PurchasedProduct{}
	purchasedProductTwo := &PurchasedProduct{}
	if err = randomize.Struct(seed, purchasedProductOne, purchasedProductDBTypes, false, purchasedProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PurchasedProduct struct: %s", err)
	}
	if err = randomize.Struct(seed, purchasedProductTwo, purchasedProductDBTypes, false, purchasedProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PurchasedProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = purchasedProductOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = purchasedProductTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PurchasedProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func purchasedProductBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PurchasedProduct) error {
	*o = PurchasedProduct{}
	return nil
}

func purchasedProductAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PurchasedProduct) error {
	*o = PurchasedProduct{}
	return nil
}

func purchasedProductAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PurchasedProduct) error {
	*o = PurchasedProduct{}
	return nil
}

func purchasedProductBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PurchasedProduct) error {
	*o = PurchasedProduct{}
	return nil
}

func purchasedProductAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PurchasedProduct) error {
	*o = PurchasedProduct{}
	return nil
}

func purchasedProductBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PurchasedProduct) error {
	*o = PurchasedProduct{}
	return nil
}

func purchasedProductAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PurchasedProduct) error {
	*o = PurchasedProduct{}
	return nil
}

func purchasedProductBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PurchasedProduct) error {
	*o = PurchasedProduct{}
	return nil
}

func purchasedProductAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PurchasedProduct) error {
	*o = PurchasedProduct{}
	return nil
}

func testPurchasedProductsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PurchasedProduct{}
	o := &PurchasedProduct{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, purchasedProductDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PurchasedProduct object: %s", err)
	}

	AddPurchasedProductHook(boil.BeforeInsertHook, purchasedProductBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	purchasedProductBeforeInsertHooks = []PurchasedProductHook{}

	AddPurchasedProductHook(boil.AfterInsertHook, purchasedProductAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	purchasedProductAfterInsertHooks = []PurchasedProductHook{}

	AddPurchasedProductHook(boil.AfterSelectHook, purchasedProductAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	purchasedProductAfterSelectHooks = []PurchasedProductHook{}

	AddPurchasedProductHook(boil.BeforeUpdateHook, purchasedProductBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	purchasedProductBeforeUpdateHooks = []PurchasedProductHook{}

	AddPurchasedProductHook(boil.AfterUpdateHook, purchasedProductAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	purchasedProductAfterUpdateHooks = []PurchasedProductHook{}

	AddPurchasedProductHook(boil.BeforeDeleteHook, purchasedProductBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	purchasedProductBeforeDeleteHooks = []PurchasedProductHook{}

	AddPurchasedProductHook(boil.AfterDeleteHook, purchasedProductAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	purchasedProductAfterDeleteHooks = []PurchasedProductHook{}

	AddPurchasedProductHook(boil.BeforeUpsertHook, purchasedProductBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	purchasedProductBeforeUpsertHooks = []PurchasedProductHook{}

	AddPurchasedProductHook(boil.AfterUpsertHook, purchasedProductAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	purchasedProductAfterUpsertHooks = []PurchasedProductHook{}
}

func testPurchasedProductsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PurchasedProduct{}
	if err = randomize.Struct(seed, o, purchasedProductDBTypes, true, purchasedProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PurchasedProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PurchasedProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPurchasedProductsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PurchasedProduct{}
	if err = randomize.Struct(seed, o, purchasedProductDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PurchasedProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(purchasedProductColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PurchasedProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPurchasedProductsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PurchasedProduct{}
	if err = randomize.Struct(seed, o, purchasedProductDBTypes, true, purchasedProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PurchasedProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPurchasedProductsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PurchasedProduct{}
	if err = randomize.Struct(seed, o, purchasedProductDBTypes, true, purchasedProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PurchasedProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PurchasedProductSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPurchasedProductsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PurchasedProduct{}
	if err = randomize.Struct(seed, o, purchasedProductDBTypes, true, purchasedProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PurchasedProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PurchasedProducts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	purchasedProductDBTypes = map[string]string{`ID`: `int`, `DocumentID`: `int`, `Name`: `varchar`, `Number`: `int`, `Unit`: `varchar`, `UnitPrice`: `int`, `DeletedAt`: `timestamp`, `Notes`: `varchar`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`}
	_                       = bytes.MinRead
)

func testPurchasedProductsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(purchasedProductPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(purchasedProductAllColumns) == len(purchasedProductPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PurchasedProduct{}
	if err = randomize.Struct(seed, o, purchasedProductDBTypes, true, purchasedProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PurchasedProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PurchasedProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, purchasedProductDBTypes, true, purchasedProductPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PurchasedProduct struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPurchasedProductsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(purchasedProductAllColumns) == len(purchasedProductPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PurchasedProduct{}
	if err = randomize.Struct(seed, o, purchasedProductDBTypes, true, purchasedProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PurchasedProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PurchasedProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, purchasedProductDBTypes, true, purchasedProductPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PurchasedProduct struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(purchasedProductAllColumns, purchasedProductPrimaryKeyColumns) {
		fields = purchasedProductAllColumns
	} else {
		fields = strmangle.SetComplement(
			purchasedProductAllColumns,
			purchasedProductPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PurchasedProductSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPurchasedProductsUpsert(t *testing.T) {
	t.Parallel()

	if len(purchasedProductAllColumns) == len(purchasedProductPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLPurchasedProductUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PurchasedProduct{}
	if err = randomize.Struct(seed, &o, purchasedProductDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PurchasedProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PurchasedProduct: %s", err)
	}

	count, err := PurchasedProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, purchasedProductDBTypes, false, purchasedProductPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PurchasedProduct struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PurchasedProduct: %s", err)
	}

	count, err = PurchasedProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
